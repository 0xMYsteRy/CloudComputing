{"ast":null,"code":"// import React from 'react';\n// import Helmet from 'react-helmet';\n// import L from 'leaflet';\n// import { promiseToFlyTo, geoJsonToMarkers, clearMapLayers } from '../components/lib/map';\n// import { trackerLocationsToGeoJson, trackerFeatureToHtmlMarker } from '../components/lib/coronavirus';\n// import { commafy, friendlyDate } from '../components/lib/util';\n// import { useCoronavirusTracker } from 'hooks';\n// import Layout from '../components/Layout';\n// import Container from '../components/Container';\n// import Map from '../components/Map';\n// const LOCATION = {\n//   lat: 0,\n//   lng: 0,\n// };\n// const CENTER = [LOCATION.lat, LOCATION.lng];\n// const DEFAULT_ZOOM = 1;\n// const IndexPage = () => {\n//   const { data: countries = [] } = useCoronavirusTracker({\n//     api: 'countries',\n//   });\n//   const { data: stats = {} } = useCoronavirusTracker({\n//     api: 'all',\n//   });\n//   const hasCountries = Array.isArray( countries ) && countries.length > 0;\n//   /**\n//    * mapEffect\n//    * @description Fires a callback once the page renders\n//    * @example Here this is and example of being used to zoom in and set a popup on load\n//    */\n//   async function mapEffect({ leafletElement: map } = {}) {\n//     if ( !map || !hasCountries ) return;\n//     clearMapLayers({\n//       map,\n//       excludeByName: ['Mapbox'],\n//     });\n//     const locationsGeoJson = trackerLocationsToGeoJson( countries );\n//     const locationsGeoJsonLayers = geoJsonToMarkers( locationsGeoJson, {\n//       onClick: handleOnMarkerClick,\n//       featureToHtml: trackerFeatureToHtmlMarker,\n//     });\n//     const bounds = locationsGeoJsonLayers.getBounds();\n//     locationsGeoJsonLayers.addTo( map );\n//     map.fitBounds( bounds );\n//   }\n//   function handleOnMarkerClick({ feature = {} } = {}, event = {}) {\n//     const { target = {} } = event;\n//     const { _map: map = {} } = target;\n//     const { geometry = {}, properties = {} } = feature;\n//     const { coordinates } = geometry;\n//     const { countryBounds, countryCode } = properties;\n//     promiseToFlyTo( map, {\n//       center: {\n//         lat: coordinates[1],\n//         lng: coordinates[0],\n//       },\n//       zoom: 3,\n//     });\n//     if ( countryBounds && countryCode !== 'US' ) {\n//       const boundsGeoJsonLayer = new L.GeoJSON( countryBounds );\n//       const boundsGeoJsonLayerBounds = boundsGeoJsonLayer.getBounds();\n//       map.fitBounds( boundsGeoJsonLayerBounds );\n//     }\n//   }\n//   const mapSettings = {\n//     center: CENTER,\n//     defaultBaseMap: 'Mapbox',\n//     zoom: DEFAULT_ZOOM,\n//     mapEffect,\n//   };\n//   return (\n//     <Layout pageName=\"home\">\n//       <Helmet>\n//         <title>Home Page</title>\n//       </Helmet>\n//       <div className=\"tracker\">\n//         <Map {...mapSettings} />\n//         <div className=\"tracker-stats\">\n//           <ul>\n//             <li className=\"tracker-stat\">\n//               <p className=\"tracker-stat-primary\">\n//                 { stats ? commafy( stats?.tests ) : '-' }\n//                 <strong>Total Tests</strong>\n//               </p>\n//               <p className=\"tracker-stat-secondary\">\n//                 { stats ? commafy( stats?.testsPerOneMillion ) : '-' }\n//                 <strong>Per 1 Million</strong>\n//               </p>\n//             </li>\n//             <li className=\"tracker-stat\">\n//               <p className=\"tracker-stat-primary\">\n//                 { stats ? commafy( stats?.cases ) : '-' }\n//                 <strong>Total Cases</strong>\n//               </p>\n//               <p className=\"tracker-stat-secondary\">\n//                 { stats ? commafy( stats?.casesPerOneMillion ) : '-' }\n//                 <strong>Per 1 Million</strong>\n//               </p>\n//             </li>\n//             <li className=\"tracker-stat\">\n//               <p className=\"tracker-stat-primary\">\n//                 { stats ? commafy( stats?.deaths ) : '-' }\n//                 <strong>Total Deaths</strong>\n//               </p>\n//               <p className=\"tracker-stat-secondary\">\n//                 { stats ? commafy( stats?.deathsPerOneMillion ) : '-' }\n//                 <strong>Per 1 Million</strong>\n//               </p>\n//             </li>\n//             <li className=\"tracker-stat\">\n//               <p className=\"tracker-stat-primary\">\n//                 { stats ? commafy( stats?.active ) : '-' }\n//                 <strong>Active</strong>\n//               </p>\n//             </li>\n//             <li className=\"tracker-stat\">\n//               <p className=\"tracker-stat-primary\">\n//                 { stats ? commafy( stats?.critical ) : '-' }\n//                 <strong>Critical</strong>\n//               </p>\n//             </li>\n//             <li className=\"tracker-stat\">\n//               <p className=\"tracker-stat-primary\">\n//                 { stats ? commafy( stats?.recovered ) : '-' }\n//                 <strong>Recovered</strong>\n//               </p>\n//             </li>\n//           </ul>\n//         </div>\n//         <div className=\"tracker-last-updated\">\n//           <p>Last Updated: { stats ? friendlyDate( stats?.updated ) : '-' }</p>\n//         </div>\n//       </div>\n//       <Container type=\"content\" className=\"text-center home-start\">\n//         <h2>Demo Mapping App with Gatsby and React Leaflet</h2>\n//         <ul>\n//           <li>\n//             Uses{ ' ' }\n//             <a href=\"https://github.com/ExpDev07/coronavirus-tracker-api\">\n//               github.com/ExpDev07/coronavirus-tracker-api\n//             </a>{ ' ' }\n//             via <a href=\"https://coronavirus-tracker-api.herokuapp.com/\">coronavirus-tracker-api.herokuapp.com</a>\n//           </li>\n//           <li>\n//             Which uses jhu - <a href=\"https://github.com/CSSEGISandData/COVID-19\">github.com/CSSEGISandData/COVID-19</a>{ ' ' }\n//             - Worldwide Data repository operated by the Johns Hopkins University Center for Systems Science and\n//             Engineering (JHU CSSE).\n//           </li>\n//           <li>\n//             And csbs -{ ' ' }\n//             <a href=\"https://www.csbs.org/information-covid-19-coronavirus\">\n//               csbs.org/information-covid-19-coronavirus\n//             </a>{ ' ' }\n//             - U.S. County data that comes from the Conference of State Bank Supervisors.\n//           </li>\n//         </ul>\n//         <h2>Want to build your own map?</h2>\n//         <p>\n//           Check out{ ' ' }\n//           <a href=\"https://github.com/colbyfayock/gatsby-starter-leaflet\">\n//             github.com/colbyfayock/gatsby-starter-leaflet\n//           </a>\n//         </p>\n//       </Container>\n//     </Layout>\n//   );\n// };\n// export default IndexPage;","map":{"version":3,"sources":["/Users/mystery/Desktop/bookstore-v2/src/pages/UltimateDashboard.js"],"names":[],"mappingssourcesContent":["// import React from 'react';\n// import Helmet from 'react-helmet';\n// import L from 'leaflet';\n\n// import { promiseToFlyTo, geoJsonToMarkers, clearMapLayers } from '../components/lib/map';\n// import { trackerLocationsToGeoJson, trackerFeatureToHtmlMarker } from '../components/lib/coronavirus';\n// import { commafy, friendlyDate } from '../components/lib/util';\n// import { useCoronavirusTracker } from 'hooks';\n\n// import Layout from '../components/Layout';\n// import Container from '../components/Container';\n// import Map from '../components/Map';\n\n// const LOCATION = {\n//   lat: 0,\n//   lng: 0,\n// };\n// const CENTER = [LOCATION.lat, LOCATION.lng];\n// const DEFAULT_ZOOM = 1;\n\n// const IndexPage = () => {\n//   const { data: countries = [] } = useCoronavirusTracker({\n//     api: 'countries',\n//   });\n\n//   const { data: stats = {} } = useCoronavirusTracker({\n//     api: 'all',\n//   });\n\n//   const hasCountries = Array.isArray( countries ) && countries.length > 0;\n\n//   /**\n//    * mapEffect\n//    * @description Fires a callback once the page renders\n//    * @example Here this is and example of being used to zoom in and set a popup on load\n//    */\n\n//   async function mapEffect({ leafletElement: map } = {}) {\n//     if ( !map || !hasCountries ) return;\n\n//     clearMapLayers({\n//       map,\n//       excludeByName: ['Mapbox'],\n//     });\n\n//     const locationsGeoJson = trackerLocationsToGeoJson( countries );\n\n//     const locationsGeoJsonLayers = geoJsonToMarkers( locationsGeoJson, {\n//       onClick: handleOnMarkerClick,\n//       featureToHtml: trackerFeatureToHtmlMarker,\n//     });\n\n//     const bounds = locationsGeoJsonLayers.getBounds();\n\n//     locationsGeoJsonLayers.addTo( map );\n\n//     map.fitBounds( bounds );\n//   }\n\n//   function handleOnMarkerClick({ feature = {} } = {}, event = {}) {\n//     const { target = {} } = event;\n//     const { _map: map = {} } = target;\n\n//     const { geometry = {}, properties = {} } = feature;\n//     const { coordinates } = geometry;\n//     const { countryBounds, countryCode } = properties;\n\n//     promiseToFlyTo( map, {\n//       center: {\n//         lat: coordinates[1],\n//         lng: coordinates[0],\n//       },\n//       zoom: 3,\n//     });\n\n//     if ( countryBounds && countryCode !== 'US' ) {\n//       const boundsGeoJsonLayer = new L.GeoJSON( countryBounds );\n//       const boundsGeoJsonLayerBounds = boundsGeoJsonLayer.getBounds();\n\n//       map.fitBounds( boundsGeoJsonLayerBounds );\n//     }\n//   }\n\n//   const mapSettings = {\n//     center: CENTER,\n//     defaultBaseMap: 'Mapbox',\n//     zoom: DEFAULT_ZOOM,\n//     mapEffect,\n//   };\n\n//   return (\n//     <Layout pageName=\"home\">\n//       <Helmet>\n//         <title>Home Page</title>\n//       </Helmet>\n\n//       <div className=\"tracker\">\n//         <Map {...mapSettings} />\n\n//         <div className=\"tracker-stats\">\n//           <ul>\n//             <li className=\"tracker-stat\">\n//               <p className=\"tracker-stat-primary\">\n//                 { stats ? commafy( stats?.tests ) : '-' }\n//                 <strong>Total Tests</strong>\n//               </p>\n//               <p className=\"tracker-stat-secondary\">\n//                 { stats ? commafy( stats?.testsPerOneMillion ) : '-' }\n//                 <strong>Per 1 Million</strong>\n//               </p>\n//             </li>\n//             <li className=\"tracker-stat\">\n//               <p className=\"tracker-stat-primary\">\n//                 { stats ? commafy( stats?.cases ) : '-' }\n//                 <strong>Total Cases</strong>\n//               </p>\n//               <p className=\"tracker-stat-secondary\">\n//                 { stats ? commafy( stats?.casesPerOneMillion ) : '-' }\n//                 <strong>Per 1 Million</strong>\n//               </p>\n//             </li>\n//             <li className=\"tracker-stat\">\n//               <p className=\"tracker-stat-primary\">\n//                 { stats ? commafy( stats?.deaths ) : '-' }\n//                 <strong>Total Deaths</strong>\n//               </p>\n//               <p className=\"tracker-stat-secondary\">\n//                 { stats ? commafy( stats?.deathsPerOneMillion ) : '-' }\n//                 <strong>Per 1 Million</strong>\n//               </p>\n//             </li>\n//             <li className=\"tracker-stat\">\n//               <p className=\"tracker-stat-primary\">\n//                 { stats ? commafy( stats?.active ) : '-' }\n//                 <strong>Active</strong>\n//               </p>\n//             </li>\n//             <li className=\"tracker-stat\">\n//               <p className=\"tracker-stat-primary\">\n//                 { stats ? commafy( stats?.critical ) : '-' }\n//                 <strong>Critical</strong>\n//               </p>\n//             </li>\n//             <li className=\"tracker-stat\">\n//               <p className=\"tracker-stat-primary\">\n//                 { stats ? commafy( stats?.recovered ) : '-' }\n//                 <strong>Recovered</strong>\n//               </p>\n//             </li>\n//           </ul>\n//         </div>\n\n//         <div className=\"tracker-last-updated\">\n//           <p>Last Updated: { stats ? friendlyDate( stats?.updated ) : '-' }</p>\n//         </div>\n//       </div>\n\n//       <Container type=\"content\" className=\"text-center home-start\">\n//         <h2>Demo Mapping App with Gatsby and React Leaflet</h2>\n//         <ul>\n//           <li>\n//             Uses{ ' ' }\n//             <a href=\"https://github.com/ExpDev07/coronavirus-tracker-api\">\n//               github.com/ExpDev07/coronavirus-tracker-api\n//             </a>{ ' ' }\n//             via <a href=\"https://coronavirus-tracker-api.herokuapp.com/\">coronavirus-tracker-api.herokuapp.com</a>\n//           </li>\n//           <li>\n//             Which uses jhu - <a href=\"https://github.com/CSSEGISandData/COVID-19\">github.com/CSSEGISandData/COVID-19</a>{ ' ' }\n//             - Worldwide Data repository operated by the Johns Hopkins University Center for Systems Science and\n//             Engineering (JHU CSSE).\n//           </li>\n//           <li>\n//             And csbs -{ ' ' }\n//             <a href=\"https://www.csbs.org/information-covid-19-coronavirus\">\n//               csbs.org/information-covid-19-coronavirus\n//             </a>{ ' ' }\n//             - U.S. County data that comes from the Conference of State Bank Supervisors.\n//           </li>\n//         </ul>\n\n//         <h2>Want to build your own map?</h2>\n//         <p>\n//           Check out{ ' ' }\n//           <a href=\"https://github.com/colbyfayock/gatsby-starter-leaflet\">\n//             github.com/colbyfayock/gatsby-starter-leaflet\n//           </a>\n//         </p>\n//       </Container>\n//     </Layout>\n//   );\n// };\n\n// export default IndexPage;\n"]},"metadata":{},"sourceType":"module"}