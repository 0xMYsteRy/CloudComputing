{"ast":null,"code":"import { commafy, friendlyDate } from 'util';\n/**\n * trackerLocationToFeature\n * @param {object} location - Coronavirus Tracker location object\n */\n\nexport function trackerLocationToFeature(location = {}) {\n  const {\n    countryInfo = {}\n  } = location;\n  const {\n    lat,\n    long: lng,\n    iso2,\n    flag\n  } = countryInfo;\n  const countryCode = iso2;\n  let countryBounds;\n  return {\n    type: 'Feature',\n    properties: { ...location,\n      countryCode,\n      countryBounds,\n      flag\n    },\n    geometry: {\n      type: 'Point',\n      coordinates: [lng, lat]\n    }\n  };\n}\n/**\n * trackerLocationsToGeoJson\n * @param {array} locations - Coronavirus Tracker location objects array\n */\n\nexport function trackerLocationsToGeoJson(locations = []) {\n  if (locations.length === 0) return;\n  return {\n    type: 'FeatureCollection',\n    features: locations.map((location = {}) => trackerLocationToFeature(location))\n  };\n}\n/**\n * trackerFeatureToHtmlMarker\n */\n\nexport function trackerFeatureToHtmlMarker({\n  properties = {}\n} = {}) {\n  var _stats$find;\n\n  const {\n    country,\n    updated,\n    flag,\n    cases,\n    deaths,\n    recovered\n  } = properties;\n  let header = country;\n\n  if (flag) {\n    header = `<img src=\"${flag}\" name=\"flag\"> ${header}`;\n  }\n\n  let stats = [{\n    label: 'Confirmed',\n    value: cases,\n    type: 'number'\n  }, {\n    label: 'Deaths',\n    value: deaths,\n    type: 'number'\n  }, {\n    label: 'Recovered',\n    value: recovered,\n    type: 'number'\n  }, {\n    label: 'Last Update',\n    value: updated,\n    type: 'date'\n  }];\n  stats = stats.map(stat => {\n    let value = stat === null || stat === void 0 ? void 0 : stat.value;\n    if (!value) return stat;\n    let newValue = value;\n\n    if ((stat === null || stat === void 0 ? void 0 : stat.type) === 'number') {\n      newValue = commafy(value);\n\n      if (value > 999999) {\n        newValue = `${newValue.slice(0, -8)}m+`;\n      } else if (value > 999) {\n        newValue = `${newValue.slice(0, -4)}k+`;\n      }\n    } else if ((stat === null || stat === void 0 ? void 0 : stat.type) === 'date') {\n      newValue = friendlyDate(newValue);\n    }\n\n    return { ...stat,\n      value: newValue\n    };\n  });\n  let statsString = '';\n  stats.forEach(({\n    label,\n    value\n  }) => {\n    statsString = `\n      ${statsString}\n      <li><strong>${label}:</strong> ${value}</li>\n    `;\n  });\n  const casesString = (_stats$find = stats.find(({\n    label\n  }) => label === 'Confirmed')) === null || _stats$find === void 0 ? void 0 : _stats$find.value;\n  return `\n    <span class=\"icon-marker\">\n      <span class=\"icon-marker-tooltip\">\n        <h2>${header}</h2>\n        <ul>${statsString}</ul>\n      </span>\n      ${casesString}\n    </span>\n  `;\n}","map":{"version":3,"sources":["/Users/mystery/Desktop/bookstore-v2/src/components/lib/coronavirus.js"],"names":["commafy","friendlyDate","trackerLocationToFeature","location","countryInfo","lat","long","lng","iso2","flag","countryCode","countryBounds","type","properties","geometry","coordinates","trackerLocationsToGeoJson","locations","length","features","map","trackerFeatureToHtmlMarker","country","updated","cases","deaths","recovered","header","stats","label","value","stat","newValue","slice","statsString","forEach","casesString","find"],"mappings":"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","sourcesContent":["import { commafy, friendlyDate } from 'util';\n\n/**\n * trackerLocationToFeature\n * @param {object} location - Coronavirus Tracker location object\n */\n\nexport function trackerLocationToFeature( location = {}) {\n  const { countryInfo = {} } = location;\n  const { lat, long: lng, iso2, flag } = countryInfo;\n\n  const countryCode = iso2;\n\n  let countryBounds;\n\n  return {\n    type: 'Feature',\n    properties: {\n      ...location,\n      countryCode,\n      countryBounds,\n      flag,\n    },\n    geometry: {\n      type: 'Point',\n      coordinates: [lng, lat],\n    },\n  };\n}\n\n/**\n * trackerLocationsToGeoJson\n * @param {array} locations - Coronavirus Tracker location objects array\n */\n\nexport function trackerLocationsToGeoJson( locations = []) {\n  if ( locations.length === 0 ) return;\n\n  return {\n    type: 'FeatureCollection',\n    features: locations.map(( location = {}) => trackerLocationToFeature( location )),\n  };\n}\n\n/**\n * trackerFeatureToHtmlMarker\n */\n\nexport function trackerFeatureToHtmlMarker({ properties = {} } = {}) {\n  const { country, updated, flag, cases, deaths, recovered } = properties;\n\n  let header = country;\n\n  if ( flag ) {\n    header = `<img src=\"${flag}\" name=\"flag\"> ${header}`;\n  }\n\n  let stats = [\n    {\n      label: 'Confirmed',\n      value: cases,\n      type: 'number',\n    },\n    {\n      label: 'Deaths',\n      value: deaths,\n      type: 'number',\n    },\n    {\n      label: 'Recovered',\n      value: recovered,\n      type: 'number',\n    },\n    {\n      label: 'Last Update',\n      value: updated,\n      type: 'date',\n    },\n  ];\n\n  stats = stats.map(( stat ) => {\n    let value = stat?.value;\n\n    if ( !value ) return stat;\n\n    let newValue = value;\n\n    if ( stat?.type === 'number' ) {\n      newValue = commafy( value );\n      if ( value > 999999 ) {\n        newValue = `${newValue.slice( 0, -8 )}m+`;\n      } else if ( value > 999 ) {\n        newValue = `${newValue.slice( 0, -4 )}k+`;\n      }\n    } else if ( stat?.type === 'date' ) {\n      newValue = friendlyDate( newValue );\n    }\n\n    return {\n      ...stat,\n      value: newValue,\n    };\n  });\n\n  let statsString = '';\n\n  stats.forEach(({ label, value }) => {\n    statsString = `\n      ${statsString}\n      <li><strong>${label}:</strong> ${value}</li>\n    `;\n  });\n\n  const casesString = stats.find(({ label }) => label === 'Confirmed' )?.value;\n\n  return `\n    <span class=\"icon-marker\">\n      <span class=\"icon-marker-tooltip\">\n        <h2>${header}</h2>\n        <ul>${statsString}</ul>\n      </span>\n      ${casesString}\n    </span>\n  `;\n}\n"]},"metadata":{},"sourceType":"module"}