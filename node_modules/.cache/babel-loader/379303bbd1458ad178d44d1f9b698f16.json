{"ast":null,"code":"var _jsxFileName = \"/Users/mystery/Desktop/bookstore-v2/src/components/Map/Map.js\";\nimport React from \"react\";\nimport { Map as LeafletMap, TileLayer, Circle, Popup } from \"react-leaflet\";\nimport 'leaflet/dist/leaflet.css';\nimport \"./Map.css\";\n\nfunction Map({\n  countries,\n  casesType,\n  center,\n  zoom\n}) {\n  const numberFormat = value => {\n    return new Intl.NumberFormat().format(value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LeafletMap, {\n    center: center,\n    zoom: zoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TileLayer, {\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }), countries.map((country, i) => /*#__PURE__*/React.createElement(Circle, {\n    key: i,\n    center: [country.countryInfo.lat, country.countryInfo.long],\n    color: casesTypeColors[casesType].hex,\n    color: \"#ff0000\",\n    fillColor: \"#ff0000\",\n    fillOpacity: 0.3,\n    radius: Math.sqrt(country['cases']) * 800,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Popup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info-flag\",\n    style: {\n      backgroundImage: `url(${country.countryInfo.flag})`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, country.country), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info-confirmed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }, \"Cases: \", numberFormat(country.cases)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info-recovered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, \"Recovered: \", numberFormat(country.recovered)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info-deaths\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, \"Deaths: \", numberFormat(country.deaths))))))));\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/mystery/Desktop/bookstore-v2/src/components/Map/Map.js"],"names":["React","Map","LeafletMap","TileLayer","Circle","Popup","countries","casesType","center","zoom","numberFormat","value","Intl","NumberFormat","format","map","country","i","countryInfo","lat","long","casesTypeColors","hex","Math","sqrt","backgroundImage","flag","cases","recovered","deaths"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAG,IAAIC,UAAhB,EAA4BC,SAA5B,EAAuCC,MAAvC,EAA+CC,KAA/C,QAA4D,eAA5D;AACA,OAAO,0BAAP;AACA,OAAO,WAAP;;AAEA,SAASJ,GAAT,CAAa;AAAEK,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA,MAAxB;AAAgCC,EAAAA;AAAhC,CAAb,EAAqD;AAEnD,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,WAAO,IAAIC,IAAI,CAACC,YAAT,GAAwBC,MAAxB,CAA+BH,KAA/B,CAAP;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAEH,MAApB;AAA4B,IAAA,IAAI,EAAEC,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,GAAG,EAAC,oDADN;AAEE,IAAA,WAAW,EAAC,0EAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAKGH,SAAS,CAACS,GAAV,CAAc,CAACC,OAAD,EAAUC,CAAV,kBACb,oBAAC,MAAD;AACE,IAAA,GAAG,EAAEA,CADP;AAEE,IAAA,MAAM,EAAE,CAACD,OAAO,CAACE,WAAR,CAAoBC,GAArB,EAA0BH,OAAO,CAACE,WAAR,CAAoBE,IAA9C,CAFV;AAGE,IAAA,KAAK,EAAEC,eAAe,CAACd,SAAD,CAAf,CAA2Be,GAHpC;AAIE,IAAA,KAAK,EAAC,SAJR;AAKE,IAAA,SAAS,EAAC,SALZ;AAME,IAAA,WAAW,EAAE,GANf;AAOE,IAAA,MAAM,EACJC,IAAI,CAACC,IAAL,CAAUR,OAAO,CAAC,OAAD,CAAjB,IAA8B,GARlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAWE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,WADZ;AAEE,IAAA,KAAK,EAAE;AAAES,MAAAA,eAAe,EAAG,OAAMT,OAAO,CAACE,WAAR,CAAoBQ,IAAK;AAAnD,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAKE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BV,OAAO,CAACA,OAApC,CALF,eAME;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAGUN,YAAY,CAACM,OAAO,CAACW,KAAT,CAHtB,CANF,eAWE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACcjB,YAAY,CAACM,OAAO,CAACY,SAAT,CAD1B,CAXF,eAcE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACWlB,YAAY,CAACM,OAAO,CAACa,MAAT,CADvB,CAdF,CADF,CAXF,CADD,CALH,CADF,CADF;AA4CD;;AAED,eAAe5B,GAAf","sourcesContent":["import React from \"react\";\nimport { Map as LeafletMap, TileLayer, Circle, Popup } from \"react-leaflet\";\nimport 'leaflet/dist/leaflet.css'\nimport \"./Map.css\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n\n  const numberFormat = (value) => {\n    return new Intl.NumberFormat().format(value);\n  }\n\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {countries.map((country, i) => (\n          <Circle\n            key={i}\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            color={casesTypeColors[casesType].hex}\n            color=\"#ff0000\"\n            fillColor=\"#ff0000\"\n            fillOpacity={0.3}\n            radius={\n              Math.sqrt(country['cases']) * 800\n            }\n          >\n            <Popup>\n              <div className=\"info-container\">\n                <div\n                  className=\"info-flag\"\n                  style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n                ></div>\n                <div className=\"info-name\">{country.country}</div>\n                <div className=\"info-confirmed\">\n                  {/* Cases: {numeral(country.cases).format(\"0,0\")}\n                   */}\n                  Cases: {numberFormat(country.cases)}\n                </div>\n                <div className=\"info-recovered\">\n                  Recovered: {numberFormat(country.recovered)}\n                </div>\n                <div className=\"info-deaths\">\n                  Deaths: {numberFormat(country.deaths)}\n                </div>\n              </div>\n            </Popup>\n          </Circle>\n        ))}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}