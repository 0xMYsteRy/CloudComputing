{"ast":null,"code":"import L from 'leaflet';\n/**\n * geoJsonToMarkers\n */\n\nexport function geoJsonToMarkers(geoJson, options) {\n  return new L.GeoJSON(geoJson, {\n    pointToLayer: pointToLayerMarkerCreator(options)\n  });\n}\n/**\n * clearMapLayers\n */\n\nexport function pointToLayerMarkerCreator({\n  featureToHtml,\n  onClick\n} = {}) {\n  return function (feature = {}, latlng) {\n    let html = `<span class=\"icon-marker\"></span>`;\n\n    if (typeof featureToHtml === 'function') {\n      html = featureToHtml(feature);\n    }\n\n    function onMarkerClick(e) {\n      if (typeof onClick === 'function') {\n        onClick({\n          feature,\n          latlng\n        }, e);\n      }\n    }\n\n    return L.marker(latlng, {\n      icon: L.divIcon({\n        className: 'icon',\n        html\n      }),\n      riseOnHover: true\n    }).on('click', onMarkerClick);\n  };\n}\n/**\n * clearMapLayers\n */\n\nexport function clearMapLayers({\n  map,\n  excludeByName = []\n}) {\n  if (!map || typeof map.eachLayer !== 'function') return;\n  const layersRemoved = [];\n  map.eachLayer((layer = {}) => {\n    const {\n      options = {}\n    } = layer;\n    const {\n      name\n    } = options;\n    if (name && excludeByName.includes(name)) return;\n    layersRemoved.push(layer);\n    map.removeLayer(layer);\n  });\n  return layersRemoved;\n}\n/**\n * promiseToFlyTo\n * @description\n */\n\nexport function promiseToFlyTo(map, {\n  zoom,\n  center\n}) {\n  return new Promise((resolve, reject) => {\n    const baseError = 'Failed to fly to area';\n\n    if (!map.flyTo) {\n      reject(`${baseError}: no flyTo method on map`);\n    }\n\n    const mapCenter = center || map.getCenter();\n    const mapZoom = zoom || map.getZoom();\n    map.flyTo(mapCenter, mapZoom, {\n      duration: 1\n    });\n    map.once('moveend', () => {\n      resolve();\n    });\n  });\n}\n/**\n * getCurrentLocation\n * @description\n */\n\nexport function getCurrentLocation() {\n  return new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(pos => resolve({\n      lat: pos.coords.latitude,\n      lng: pos.coords.longitude\n    }), err => reject(err));\n  });\n}","map":{"version":3,"sources":["/Users/mystery/Desktop/bookstore-v2/src/components/lib/map.js"],"names":["L","geoJsonToMarkers","geoJson","options","GeoJSON","pointToLayer","pointToLayerMarkerCreator","featureToHtml","onClick","feature","latlng","html","onMarkerClick","e","marker","icon","divIcon","className","riseOnHover","on","clearMapLayers","map","excludeByName","eachLayer","layersRemoved","layer","name","includes","push","removeLayer","promiseToFlyTo","zoom","center","Promise","resolve","reject","baseError","flyTo","mapCenter","getCenter","mapZoom","getZoom","duration","once","getCurrentLocation","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","lng","longitude","err"],"mappings":"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","sourcesContent":["import L from 'leaflet';\n\n/**\n * geoJsonToMarkers\n */\n\nexport function geoJsonToMarkers( geoJson, options ) {\n  return new L.GeoJSON( geoJson, {\n    pointToLayer: pointToLayerMarkerCreator( options ),\n  });\n}\n\n/**\n * clearMapLayers\n */\n\nexport function pointToLayerMarkerCreator({ featureToHtml, onClick } = {}) {\n  return function ( feature = {}, latlng ) {\n    let html = `<span class=\"icon-marker\"></span>`;\n\n    if ( typeof featureToHtml === 'function' ) {\n      html = featureToHtml( feature );\n    }\n\n    function onMarkerClick( e ) {\n      if ( typeof onClick === 'function' ) {\n        onClick(\n          {\n            feature,\n            latlng,\n          },\n          e\n        );\n      }\n    }\n\n    return L.marker( latlng, {\n      icon: L.divIcon({\n        className: 'icon',\n        html,\n      }),\n      riseOnHover: true,\n    }).on( 'click', onMarkerClick );\n  };\n}\n\n/**\n * clearMapLayers\n */\n\nexport function clearMapLayers({ map, excludeByName = [] }) {\n  if ( !map || typeof map.eachLayer !== 'function' ) return;\n  const layersRemoved = [];\n\n  map.eachLayer(( layer = {}) => {\n    const { options = {} } = layer;\n    const { name } = options;\n\n    if ( name && excludeByName.includes( name )) return;\n\n    layersRemoved.push( layer );\n\n    map.removeLayer( layer );\n  });\n\n  return layersRemoved;\n}\n\n/**\n * promiseToFlyTo\n * @description\n */\n\nexport function promiseToFlyTo( map, { zoom, center }) {\n  return new Promise(( resolve, reject ) => {\n    const baseError = 'Failed to fly to area';\n\n    if ( !map.flyTo ) {\n      reject( `${baseError}: no flyTo method on map` );\n    }\n\n    const mapCenter = center || map.getCenter();\n    const mapZoom = zoom || map.getZoom();\n\n    map.flyTo( mapCenter, mapZoom, {\n      duration: 1,\n    });\n\n    map.once( 'moveend', () => {\n      resolve();\n    });\n  });\n}\n\n/**\n * getCurrentLocation\n * @description\n */\n\nexport function getCurrentLocation() {\n  return new Promise(( resolve, reject ) => {\n    navigator.geolocation.getCurrentPosition(\n      ( pos ) => resolve({ lat: pos.coords.latitude, lng: pos.coords.longitude }),\n      ( err ) => reject( err )\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"module"}