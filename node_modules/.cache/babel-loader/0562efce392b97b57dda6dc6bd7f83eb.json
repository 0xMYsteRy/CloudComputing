{"ast":null,"code":"/**\n * isDomAvailable\n * @description Checks to see if the DOM is available by checking the existence of the window and document\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/ExecutionEnvironment.js#L12\n */\nexport function isDomAvailable() {\n  return typeof window !== 'undefined' && !!window.document && !!window.document.createElement;\n}\n/**\n * commafy\n * @description Applies appropriate commas to large numbers\n */\n\nexport function commafy(value) {\n  let numberString = `${value}`;\n  numberString = numberString.split('');\n  numberString.reverse();\n  numberString = numberString.reduce((prev, current, index) => {\n    const shouldComma = (index + 1) % 3 === 0 && index + 1 < numberString.length;\n    let updatedValue = `${prev}${current}`;\n\n    if (shouldComma) {\n      updatedValue = `${updatedValue},`;\n    }\n\n    return updatedValue;\n  }, '');\n  numberString = numberString.split('');\n  numberString.reverse();\n  numberString = numberString.join('');\n  return numberString;\n}\n/**\n * friendlyDate\n * @description Takes in a date value and returns a friendly version\n */\n\nexport function friendlyDate(value) {\n  const date = new Date(value);\n  return new Intl.DateTimeFormat('en', {\n    year: 'numeric',\n    month: 'short',\n    day: '2-digit',\n    hour: 'numeric',\n    minute: 'numeric'\n  }).format(date);\n}","map":{"version":3,"sources":["/Users/mystery/Desktop/bookstore-v2/src/components/lib/util.js"],"names":["isDomAvailable","window","document","createElement","commafy","value","numberString","split","reverse","reduce","prev","current","index","shouldComma","length","updatedValue","join","friendlyDate","date","Date","Intl","DateTimeFormat","year","month","day","hour","minute","format"],"mappings":"AAAA;;;;;AAMA,OAAO,SAASA,cAAT,GAA0B;AAC/B,SAAO,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,CAAC,CAACA,MAAM,CAACC,QAA1C,IAAsD,CAAC,CAACD,MAAM,CAACC,QAAP,CAAgBC,aAA/E;AACD;AAED;;;;;AAKA,OAAO,SAASC,OAAT,CAAkBC,KAAlB,EAA0B;AAC/B,MAAIC,YAAY,GAAI,GAAED,KAAM,EAA5B;AAEAC,EAAAA,YAAY,GAAGA,YAAY,CAACC,KAAb,CAAoB,EAApB,CAAf;AAEAD,EAAAA,YAAY,CAACE,OAAb;AAEAF,EAAAA,YAAY,GAAGA,YAAY,CAACG,MAAb,CAAoB,CAAEC,IAAF,EAAQC,OAAR,EAAiBC,KAAjB,KAA4B;AAC7D,UAAMC,WAAW,GAAG,CAAED,KAAK,GAAG,CAAV,IAAgB,CAAhB,KAAsB,CAAtB,IAA2BA,KAAK,GAAG,CAAR,GAAYN,YAAY,CAACQ,MAAxE;AACA,QAAIC,YAAY,GAAI,GAAEL,IAAK,GAAEC,OAAQ,EAArC;;AACA,QAAKE,WAAL,EAAmB;AACjBE,MAAAA,YAAY,GAAI,GAAEA,YAAa,GAA/B;AACD;;AACD,WAAOA,YAAP;AACD,GAPc,EAOZ,EAPY,CAAf;AASAT,EAAAA,YAAY,GAAGA,YAAY,CAACC,KAAb,CAAoB,EAApB,CAAf;AACAD,EAAAA,YAAY,CAACE,OAAb;AACAF,EAAAA,YAAY,GAAGA,YAAY,CAACU,IAAb,CAAmB,EAAnB,CAAf;AAEA,SAAOV,YAAP;AACD;AAED;;;;;AAKA,OAAO,SAASW,YAAT,CAAuBZ,KAAvB,EAA+B;AACpC,QAAMa,IAAI,GAAG,IAAIC,IAAJ,CAAUd,KAAV,CAAb;AACA,SAAO,IAAIe,IAAI,CAACC,cAAT,CAAyB,IAAzB,EAA+B;AACpCC,IAAAA,IAAI,EAAE,SAD8B;AAEpCC,IAAAA,KAAK,EAAE,OAF6B;AAGpCC,IAAAA,GAAG,EAAE,SAH+B;AAIpCC,IAAAA,IAAI,EAAE,SAJ8B;AAKpCC,IAAAA,MAAM,EAAE;AAL4B,GAA/B,EAMJC,MANI,CAMIT,IANJ,CAAP;AAOD","sourcesContent":["/**\n * isDomAvailable\n * @description Checks to see if the DOM is available by checking the existence of the window and document\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/ExecutionEnvironment.js#L12\n */\n\nexport function isDomAvailable() {\n  return typeof window !== 'undefined' && !!window.document && !!window.document.createElement;\n}\n\n/**\n * commafy\n * @description Applies appropriate commas to large numbers\n */\n\nexport function commafy( value ) {\n  let numberString = `${value}`;\n\n  numberString = numberString.split( '' );\n\n  numberString.reverse();\n\n  numberString = numberString.reduce(( prev, current, index ) => {\n    const shouldComma = ( index + 1 ) % 3 === 0 && index + 1 < numberString.length;\n    let updatedValue = `${prev}${current}`;\n    if ( shouldComma ) {\n      updatedValue = `${updatedValue},`;\n    }\n    return updatedValue;\n  }, '' );\n\n  numberString = numberString.split( '' );\n  numberString.reverse();\n  numberString = numberString.join( '' );\n\n  return numberString;\n}\n\n/**\n * friendlyDate\n * @description Takes in a date value and returns a friendly version\n */\n\nexport function friendlyDate( value ) {\n  const date = new Date( value );\n  return new Intl.DateTimeFormat( 'en', {\n    year: 'numeric',\n    month: 'short',\n    day: '2-digit',\n    hour: 'numeric',\n    minute: 'numeric',\n  }).format( date );\n}\n"]},"metadata":{},"sourceType":"module"}