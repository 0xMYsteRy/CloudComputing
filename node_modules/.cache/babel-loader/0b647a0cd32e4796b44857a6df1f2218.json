{"ast":null,"code":"var _jsxFileName = \"/Users/mystery/Desktop/bookstore-v2/src/components/Graphs/Bar.js\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport React from \"react\";\nimport { Bar } from 'react-chartjs-2';\nexport default function CountriesBar() {\n  const [vietNamSummary, setVietNamSummary] = useState([]);\n  const [cambodiaSummary, setLaosSummary] = useState([]);\n  const [thaiLandSummary, setThaiLandSummary] = useState([]);\n  const [malaysiaSummary, setMalaysiaSummary] = useState([]);\n  const [singaporeSummary, setSingaporeSummary] = useState([]);\n  useEffect(() => {\n    axios.get('https://api.covid19api.com/live/country/vietnam/status/confirmed').then(res => {\n      setVietNamSummary(res.data);\n    }).catch(err => console.error(err));\n    axios.get('https://api.covid19api.com/live/country/singapore/status/confirmed').then(res => {\n      setSingaporeSummary(res.data);\n    }).catch(err => console.error(err));\n    axios.get('https://api.covid19api.com/live/country/thailand/status/confirmed').then(res => {\n      setThaiLandSummary(res.data);\n    }).catch(err => console.error(err));\n    axios.get('https://api.covid19api.com/live/country/cambodia/status/confirmed').then(res => {\n      setLaosSummary(res.data);\n    }).catch(err => console.error(err));\n    axios.get('https://api.covid19api.com/live/country/malaysia/status/confirmed').then(res => {\n      setMalaysiaSummary(res.data);\n    }).catch(err => console.error(err));\n  }, []);\n  var countriesSummary = [...singaporeSummary, ...cambodiaSummary, ...malaysiaSummary, ...vietNamSummary, ...thaiLandSummary]; // console.log(countriesSummary);\n  // console.log(singaporeSummary);\n  // console.log(malaysiaSummary);\n  // console.log(vietNamSummary);\n  // console.log(LaosSummary);\n  // console.log(thaiLandSummary);\n\n  const columns = [{\n    field: 'id',\n    headerName: 'tableId',\n    width: 300\n  }, {\n    field: 'ID',\n    headerName: 'id',\n    width: 300\n  }, {\n    field: 'Country',\n    headerName: 'Country',\n    width: 150,\n    editable: true\n  }, {\n    field: 'Confirmed',\n    headerName: 'Confirmed cases',\n    width: 220,\n    type: 'number'\n  }, {\n    field: 'Deaths',\n    headerName: 'Deaths',\n    type: 'number',\n    width: 160\n  }, {\n    field: 'Recovered',\n    headerName: 'Recovered cases',\n    width: 220,\n    editable: true,\n    type: 'number'\n  }, {\n    field: 'Active',\n    headerName: 'Active cases',\n    width: 160,\n    type: 'number'\n  }, {\n    field: 'Date',\n    headerName: 'Date',\n    width: 220,\n    type: 'number'\n  }];\n  var vietNamCollection = [];\n  var singaporeCollection = [];\n  var cambodiaCollection = [];\n  var malaysiaCollection = [];\n  var thailandCollection = [];\n  var vietNamToday = [];\n  var rows = [];\n  var count = 1;\n\n  for (const country of countriesSummary) {\n    country['indexNumber'] = count;\n    count++;\n    country['id'] = country['indexNumber'];\n    rows.push(country);\n  }\n\n  var currentDate = new Date();\n  var sevenDayAgo = new Date();\n  currentDate.setDate(currentDate.getDate());\n  sevenDayAgo.setDate(sevenDayAgo.getDate() - 7);\n  var temp = [];\n\n  for (const country of countriesSummary) {\n    temp.push(country.Date);\n  }\n\n  temp.sort();\n  var recentDay = temp[temp.length - 1];\n  recentDay = new Date(recentDay);\n  console.log(recentDay);\n\n  for (const country of countriesSummary) {\n    var dayInArray = new Date(country['Date']);\n\n    if (dayInArray.getTime() >= sevenDayAgo.getTime() && dayInArray.getTime() <= recentDay.getTime()) {\n      if (country['Country'] === 'Viet Nam') {\n        vietNamCollection.push(country);\n\n        if (dayInArray.toLocaleDateString() === recentDay.toLocaleDateString()) {\n          vietNamToday.push(country);\n        }\n      }\n\n      if (country['Country'] === 'Singapore') {\n        singaporeCollection.push(country);\n      }\n\n      if (country['Country'] === 'Cambodia') {\n        cambodiaCollection.push(country);\n      }\n\n      if (country['Country'] === 'Malaysia') {\n        malaysiaCollection.push(country);\n      }\n\n      if (country['Country'] === 'Thailand') {\n        thailandCollection.push(country);\n      }\n    }\n  }\n\n  function getCountryConfirmedCases(countryCollection) {\n    var dataset = [];\n\n    for (const data of countryCollection) {\n      dataset.push(data.Confirmed);\n    }\n\n    return dataset.sort();\n  }\n\n  function getMonth(countryCollection) {\n    var dataset = [];\n\n    for (const data of countryCollection) {\n      dataset.push(new Date(data.Date).toLocaleDateString('fr-CA', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n      }));\n    }\n\n    return dataset.sort();\n  }\n\n  function getCountryConfirmedDeath(countryCollection) {\n    var dataset = [];\n\n    for (const data of countryCollection) {\n      dataset.push(data.Deaths);\n    }\n\n    return dataset;\n  }\n\n  var label = [];\n\n  for (const vn of vietNamCollection) {\n    label.push(new Date(vn.Date).toLocaleDateString());\n  }\n\n  label.sort();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: label,\n      datasets: [{\n        label: 'Vietnam Total Cases ',\n        data: getCountryConfirmedCases(vietNamCollection),\n        backgroundColor: ['rgba(255, 99, 132, 0.2)'],\n        borderColor: ['rgba(255, 99, 132, 1)'],\n        borderWidth: 2,\n        maxBarThickness: 30\n      }, {\n        label: 'Malaysia Total Cases ',\n        data: getCountryConfirmedCases(malaysiaCollection),\n        backgroundColor: ['rgba(255, 159, 64, 0.2)'],\n        borderColor: ['rgba(255, 159, 64, 1)'],\n        borderWidth: 2,\n        maxBarThickness: 30\n      }, {\n        label: 'Cambodia Total Cases ',\n        data: getCountryConfirmedCases(cambodiaCollection),\n        backgroundColor: ['rgba(153, 102, 255, 0.2)'],\n        borderColor: ['rgba(153, 102, 255, 1)'],\n        borderWidth: 2,\n        maxBarThickness: 30\n      }, {\n        label: 'Singapore Total Cases ',\n        data: getCountryConfirmedCases(singaporeCollection),\n        backgroundColor: ['rgba(75, 192, 192, 0.2)'],\n        borderColor: ['rgba(75, 192, 192, 1)'],\n        borderWidth: 2,\n        maxBarThickness: 30\n      }, {\n        label: 'Thailand Total Case',\n        data: getCountryConfirmedCases(thailandCollection),\n        backgroundColor: ['rgba(54, 162, 235, 0.2)'],\n        borderColor: ['rgba(54, 162, 235, 1)'],\n        borderWidth: 2,\n        maxBarThickness: 30\n      }]\n    },\n    height: 600,\n    width: 600,\n    options: {\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: true,\n          labels: {\n            color: 'rgb(255, 99, 132)',\n            font: {\n              size: 18\n            }\n          }\n        }\n      },\n      scales: {\n        yAxes: [{\n          color: 'red',\n          font: {\n            size: 25\n          },\n          ticks: {\n            tickColor: 'red',\n            beginAtZero: false\n          }\n        }]\n      },\n      legend: {\n        labels: {\n          fontSize: 25\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 11\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/mystery/Desktop/bookstore-v2/src/components/Graphs/Bar.js"],"names":["axios","useState","useEffect","React","Bar","CountriesBar","vietNamSummary","setVietNamSummary","cambodiaSummary","setLaosSummary","thaiLandSummary","setThaiLandSummary","malaysiaSummary","setMalaysiaSummary","singaporeSummary","setSingaporeSummary","get","then","res","data","catch","err","console","error","countriesSummary","columns","field","headerName","width","editable","type","vietNamCollection","singaporeCollection","cambodiaCollection","malaysiaCollection","thailandCollection","vietNamToday","rows","count","country","push","currentDate","Date","sevenDayAgo","setDate","getDate","temp","sort","recentDay","length","log","dayInArray","getTime","toLocaleDateString","getCountryConfirmedCases","countryCollection","dataset","Confirmed","getMonth","year","month","day","getCountryConfirmedDeath","Deaths","label","vn","labels","datasets","backgroundColor","borderColor","borderWidth","maxBarThickness","maintainAspectRatio","plugins","legend","display","color","font","size","scales","yAxes","ticks","tickColor","beginAtZero","fontSize"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport { useState, useEffect } from \"react\"\nimport React from \"react\"\nimport { Bar } from 'react-chartjs-2';\n\nexport default function CountriesBar() {\n  const [vietNamSummary, setVietNamSummary] = useState([]);\n  const [cambodiaSummary, setLaosSummary] = useState([]);\n  const [thaiLandSummary, setThaiLandSummary] = useState([]);\n  const [malaysiaSummary, setMalaysiaSummary] = useState([]);\n  const [singaporeSummary, setSingaporeSummary] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get('https://api.covid19api.com/live/country/vietnam/status/confirmed')\n\n      .then((res) => {\n        setVietNamSummary(res.data);\n\n      })\n      .catch((err) => console.error(err))\n\n    axios\n      .get('https://api.covid19api.com/live/country/singapore/status/confirmed')\n\n      .then((res) => {\n        setSingaporeSummary(res.data);\n\n      })\n      .catch((err) => console.error(err))\n\n    axios\n      .get('https://api.covid19api.com/live/country/thailand/status/confirmed')\n\n      .then((res) => {\n        setThaiLandSummary(res.data);\n\n      })\n      .catch((err) => console.error(err))\n\n    axios\n      .get('https://api.covid19api.com/live/country/cambodia/status/confirmed')\n\n      .then((res) => {\n        setLaosSummary(res.data);\n\n      })\n      .catch((err) => console.error(err))\n\n    axios\n      .get('https://api.covid19api.com/live/country/malaysia/status/confirmed')\n\n      .then((res) => {\n        setMalaysiaSummary(res.data);\n\n      })\n      .catch((err) => console.error(err))\n\n  }, []);\n\n  var countriesSummary = [...singaporeSummary, ...cambodiaSummary, ...malaysiaSummary, ...vietNamSummary, ...thaiLandSummary];\n\n  // console.log(countriesSummary);\n  // console.log(singaporeSummary);\n  // console.log(malaysiaSummary);\n  // console.log(vietNamSummary);\n  // console.log(LaosSummary);\n  // console.log(thaiLandSummary);\n\n\n  const columns = [\n\n    { field: 'id', headerName: 'tableId', width: 300 },\n    { field: 'ID', headerName: 'id', width: 300 },\n    {\n      field: 'Country',\n      headerName: 'Country',\n      width: 150,\n      editable: true,\n    },\n    {\n      field: 'Confirmed',\n      headerName: 'Confirmed cases',\n      width: 220,\n      type: 'number',\n    },\n    {\n      field: 'Deaths',\n      headerName: 'Deaths',\n      type: 'number',\n      width: 160,\n    },\n    {\n      field: 'Recovered',\n      headerName: 'Recovered cases',\n      width: 220,\n      editable: true,\n      type: 'number',\n    },\n    {\n      field: 'Active',\n      headerName: 'Active cases',\n      width: 160,\n      type: 'number',\n    },\n    {\n      field: 'Date',\n      headerName: 'Date',\n      width: 220,\n      type: 'number',\n    },\n  ];\n\n  var vietNamCollection = [];\n  var singaporeCollection = [];\n  var cambodiaCollection = [];\n  var malaysiaCollection = [];\n  var thailandCollection = [];\n  var vietNamToday = [];\n\n  var rows = [];\n  var count = 1;\n  for (const country of countriesSummary) {\n\n    country['indexNumber'] = count;\n    count++;\n    country['id'] = country['indexNumber'];\n    rows.push(country);\n  }\n\n\n  var currentDate = new Date();\n  var sevenDayAgo = new Date();\n  currentDate.setDate(currentDate.getDate());\n  sevenDayAgo.setDate(sevenDayAgo.getDate() - 7);\n\n\n\n\n  var temp = [];\n  for (const country of countriesSummary) {\n    temp.push(country.Date);\n  }\n  temp.sort();\n  var recentDay = temp[temp.length - 1];\n  recentDay = new Date(recentDay);\n  console.log(recentDay);\n\n  for (const country of countriesSummary) {\n    var dayInArray = new Date(country['Date']);\n    if (dayInArray.getTime() >= sevenDayAgo.getTime() && dayInArray.getTime() <= recentDay.getTime()) {\n      if (country['Country'] === 'Viet Nam') {\n        vietNamCollection.push(country);\n        if (dayInArray.toLocaleDateString() === recentDay.toLocaleDateString()) {\n          vietNamToday.push(country);\n        }\n      }\n      if (country['Country'] === 'Singapore') {\n        singaporeCollection.push(country);\n\n      }\n      if (country['Country'] === 'Cambodia') {\n        cambodiaCollection.push(country);\n      }\n      if (country['Country'] === 'Malaysia') {\n        malaysiaCollection.push(country);\n\n      }\n      if (country['Country'] === 'Thailand') {\n        thailandCollection.push(country);\n      }\n    }\n  }\n\n  function getCountryConfirmedCases(countryCollection) {\n    var dataset = [];\n    for (const data of countryCollection) {\n      dataset.push(data.Confirmed);\n    }\n    return dataset.sort();\n  }\n\n  function getMonth(countryCollection) {\n    var dataset = [];\n    for (const data of countryCollection) {\n      dataset.push((new Date(data.Date).toLocaleDateString('fr-CA', { year: 'numeric', month: '2-digit', day: '2-digit' })))\n    }\n    return dataset.sort();\n  }\n\n  function getCountryConfirmedDeath(countryCollection) {\n    var dataset = [];\n    for (const data of countryCollection) {\n      dataset.push(data.Deaths)\n    }\n    return dataset;\n  }\n\n\n  var label = [];\n  for (const vn of vietNamCollection) {\n    label.push((new Date(vn.Date).toLocaleDateString()));\n  }\n  label.sort();\n\n  return (\n    < div>\n          <Bar\n              data={{\n                  labels: label,\n                  datasets: [\n                  {\n                      label: 'Vietnam Total Cases ',\n                      data: getCountryConfirmedCases(vietNamCollection),\n                      backgroundColor: [\n                      'rgba(255, 99, 132, 0.2)',\n\n                      ],\n                      borderColor: [\n                      'rgba(255, 99, 132, 1)',\n\n                      ],\n                      borderWidth: 2,\n                      maxBarThickness: 30,\n                  },\n                  {\n                      label: 'Malaysia Total Cases ',\n                      data: getCountryConfirmedCases(malaysiaCollection),\n                      backgroundColor: [\n                      'rgba(255, 159, 64, 0.2)'\n                      ,\n                      ],\n                      borderColor: [\n                      'rgba(255, 159, 64, 1)'\n\n                      ],\n                      borderWidth: 2,\n                      maxBarThickness: 30,\n                  },\n                  {\n                      label: 'Cambodia Total Cases ',\n                      data: getCountryConfirmedCases(cambodiaCollection),\n                      backgroundColor: [\n                      'rgba(153, 102, 255, 0.2)',\n\n                      ],\n                      borderColor: [\n                      'rgba(153, 102, 255, 1)',\n\n                      ],\n                      borderWidth: 2,\n                      maxBarThickness: 30,\n                  },\n                  {\n                      label: 'Singapore Total Cases ',\n                      data: getCountryConfirmedCases(singaporeCollection),\n                      backgroundColor: [\n                      'rgba(75, 192, 192, 0.2)',\n\n                      ],\n                      borderColor: [\n                      'rgba(75, 192, 192, 1)',\n\n                      ],\n                      borderWidth: 2,\n                      maxBarThickness: 30,\n                  },\n                  {\n                      label: 'Thailand Total Case',\n                      data: getCountryConfirmedCases(thailandCollection),\n                      backgroundColor: [\n\n                      'rgba(54, 162, 235, 0.2)',\n\n                      ],\n                      borderColor: [\n\n                      'rgba(54, 162, 235, 1)',\n\n                      ],\n                      borderWidth: 2,\n                      maxBarThickness: 30,\n                  }\n                  ],\n              }}\n              height={600}\n              width={600}\n              options={{\n                  maintainAspectRatio: false,\n                  plugins: {\n                  legend: {\n                      display: true,\n                      labels: {\n                      color: 'rgb(255, 99, 132)',\n                      font: {\n                          size: 18\n                      }\n                      }\n                  }\n                  },\n                  scales: {\n                  yAxes: [\n                      {\n                      color: 'red',\n                      font: {\n                          size: 25\n                      },\n                      ticks: {\n                          tickColor: 'red',\n                          beginAtZero: false,\n                      },\n                      },\n                  ],\n                  },\n                  legend: {\n                  labels: {\n                      fontSize: 25,\n                  },\n                  },\n              }}\n          />\n    </div>\n  )\n}\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}