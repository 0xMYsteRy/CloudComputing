{"ast":null,"code":"var _jsxFileName = \"/Users/mystery/Desktop/bookstore-v2/src/components/Graphs/HBar.js\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport React from \"react\";\nimport { Bar } from 'react-chartjs-2'; // For cards\n\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  bot: {\n    color: 'white',\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    border: 0,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)'\n  },\n  data: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    width: '74vw',\n    border: \"none\",\n    boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n    borderRadius: \"15px\"\n  }\n}));\nexport default function CountriesSummary() {\n  const [vietNamSummary, setVietNamSummary] = useState([]);\n  const [cambodiaSummary, setLaosSummary] = useState([]);\n  const [thaiLandSummary, setThaiLandSummary] = useState([]);\n  const [malaysiaSummary, setMalaysiaSummary] = useState([]);\n  const [singaporeSummary, setSingaporeSummary] = useState([]);\n  useEffect(() => {\n    axios.get('https://api.covid19api.com/live/country/vietnam/status/confirmed').then(res => {\n      setVietNamSummary(res.data);\n    }).catch(err => console.error(err));\n    axios.get('https://api.covid19api.com/live/country/singapore/status/confirmed').then(res => {\n      setSingaporeSummary(res.data);\n    }).catch(err => console.error(err));\n    axios.get('https://api.covid19api.com/live/country/thailand/status/confirmed').then(res => {\n      setThaiLandSummary(res.data);\n    }).catch(err => console.error(err));\n    axios.get('https://api.covid19api.com/live/country/cambodia/status/confirmed').then(res => {\n      setLaosSummary(res.data);\n    }).catch(err => console.error(err));\n    axios.get('https://api.covid19api.com/live/country/malaysia/status/confirmed').then(res => {\n      setMalaysiaSummary(res.data);\n    }).catch(err => console.error(err));\n  }, []);\n  var countriesSummary = [...singaporeSummary, ...cambodiaSummary, ...malaysiaSummary, ...vietNamSummary, ...thaiLandSummary]; // console.log(singaporeSummary);\n  // console.log(malaysiaSummary);\n  // console.log(vietNamSummary);\n  // console.log(LaosSummary);\n  // console.log(thaiLandSummary);\n\n  var vietNamCollection = [];\n  var singaporeCollection = [];\n  var cambodiaCollection = [];\n  var malaysiaCollection = [];\n  var thailandCollection = [];\n  var vietNamToday = [];\n  var rows = [];\n  var count = 1;\n\n  for (const country of countriesSummary) {\n    country['indexNumber'] = count;\n    count++;\n    country['id'] = country['indexNumber'];\n    rows.push(country);\n  }\n\n  var currentDate = new Date();\n  var sevenDayAgo = new Date();\n  currentDate.setDate(currentDate.getDate());\n  sevenDayAgo.setDate(sevenDayAgo.getDate() - 7);\n  var temp = [];\n\n  for (const country of countriesSummary) {\n    temp.push(country.Date);\n  }\n\n  temp.sort();\n  var recentDay = temp[temp.length - 1];\n  recentDay = new Date(recentDay);\n\n  for (const country of countriesSummary) {\n    var dayInArray = new Date(country['Date']);\n\n    if (dayInArray.getTime() >= sevenDayAgo.getTime() && dayInArray.getTime() <= recentDay.getTime()) {\n      if (country['Country'] === 'Viet Nam') {\n        vietNamCollection.push(country);\n\n        if (dayInArray.toLocaleDateString() === recentDay.toLocaleDateString()) {\n          vietNamToday.push(country);\n        }\n      }\n\n      if (country['Country'] === 'Singapore') {\n        singaporeCollection.push(country);\n      }\n\n      if (country['Country'] === 'Cambodia') {\n        cambodiaCollection.push(country);\n      }\n\n      if (country['Country'] === 'Malaysia') {\n        malaysiaCollection.push(country);\n      }\n\n      if (country['Country'] === 'Thailand') {\n        thailandCollection.push(country);\n      }\n    }\n  }\n\n  function getCountryConfirmedCases(countryCollection) {\n    var dataset = [];\n\n    for (const data of countryCollection) {\n      dataset.push(data.Confirmed);\n    }\n\n    return dataset.sort();\n  }\n\n  function getMonth(countryCollection) {\n    var dataset = [];\n\n    for (const data of countryCollection) {\n      dataset.push(new Date(data.Date).toLocaleDateString('fr-CA', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n      }));\n    }\n\n    return dataset.sort();\n  }\n\n  function getCountryConfirmedDeath(countryCollection) {\n    var dataset = [];\n\n    for (const data of countryCollection) {\n      dataset.push(data.Deaths);\n    }\n\n    return dataset;\n  }\n\n  function getonlyCountry(countryCollection) {\n    var dataset = [];\n\n    for (const data of countryCollection) {\n      dataset.push(data.Country);\n    }\n\n    return dataset;\n  }\n\n  var label = [];\n\n  for (const vn of vietNamCollection) {\n    label.push(new Date(vn.Date).toLocaleDateString());\n  }\n\n  label.sort();\n\n  function getPieChartData(countryToday) {\n    var dataSetPieChart = [];\n\n    for (const data of countryToday) {\n      dataSetPieChart.push(data.Recovered);\n      dataSetPieChart.push(data.Deaths);\n      dataSetPieChart.push(data.Confirmed);\n      dataSetPieChart.push(data.Active);\n    }\n\n    return dataSetPieChart;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: ['Vietnam', 'Thailand', 'Cambodia', 'Malaysia', 'Singapore'],\n      datasets: [{\n        label: 'Doses Given In Million',\n        data: [20.2, 31.8, 19.2, 55, 36.1],\n        fill: false,\n        backgroundColor: ['rgba(255, 99, 132, 0.2)'],\n        borderColor: ['rgba(255, 99, 132, 1)'],\n        borderWidth: 2,\n        maxBarThickness: 30\n      }, {\n        label: 'Fully Vaccinated In Million',\n        data: [2.73, 7.78, 8.59, 15.8, 4.44],\n        fill: false,\n        backgroundColor: ['rgba(54, 162, 235, 0.2)'],\n        borderColor: ['rgba(54, 162, 235, 1)'],\n        borderWidth: 2,\n        maxBarThickness: 30\n      }, {\n        label: '% Of Population Fully Vaccinated',\n        data: [2.8, 11.2, 52.1, 49.4, 77.9],\n        fill: false,\n        backgroundColor: ['rgba(255, 159, 64, 0.2)'],\n        borderColor: ['rgba(255, 159, 64, 1)'],\n        borderWidth: 2,\n        maxBarThickness: 30\n      }]\n    },\n    options: {\n      indexAxis: 'y',\n      // Elements options apply to all of the options unless overridden in a dataset\n      // In this case, we are setting the border of each horizontal bar to be 2px wide\n      elements: {\n        bar: {\n          borderWidth: 2\n        }\n      },\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'right'\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/mystery/Desktop/bookstore-v2/src/components/Graphs/HBar.js"],"names":["axios","useState","useEffect","React","Bar","makeStyles","useStyles","theme","bot","color","background","border","borderRadius","boxShadow","data","width","CountriesSummary","vietNamSummary","setVietNamSummary","cambodiaSummary","setLaosSummary","thaiLandSummary","setThaiLandSummary","malaysiaSummary","setMalaysiaSummary","singaporeSummary","setSingaporeSummary","get","then","res","catch","err","console","error","countriesSummary","vietNamCollection","singaporeCollection","cambodiaCollection","malaysiaCollection","thailandCollection","vietNamToday","rows","count","country","push","currentDate","Date","sevenDayAgo","setDate","getDate","temp","sort","recentDay","length","dayInArray","getTime","toLocaleDateString","getCountryConfirmedCases","countryCollection","dataset","Confirmed","getMonth","year","month","day","getCountryConfirmedDeath","Deaths","getonlyCountry","Country","label","vn","getPieChartData","countryToday","dataSetPieChart","Recovered","Active","labels","datasets","fill","backgroundColor","borderColor","borderWidth","maxBarThickness","indexAxis","elements","bar","responsive","plugins","legend","position"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport { useState, useEffect } from \"react\"\nimport React from \"react\"\nimport { Bar } from 'react-chartjs-2';\n\n// For cards\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  bot:\n  {\n    color: 'white',\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    border: 0,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n  },\n  data:\n  {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    width: '74vw',\n    border: \"none\",\n    boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n    borderRadius: \"15px\",\n  }\n}));\n\nexport default function CountriesSummary() {\n  const [vietNamSummary, setVietNamSummary] = useState([]);\n  const [cambodiaSummary, setLaosSummary] = useState([]);\n  const [thaiLandSummary, setThaiLandSummary] = useState([]);\n  const [malaysiaSummary, setMalaysiaSummary] = useState([]);\n  const [singaporeSummary, setSingaporeSummary] = useState([]);\n  useEffect(() => {\n    axios\n      .get('https://api.covid19api.com/live/country/vietnam/status/confirmed')\n\n      .then((res) => {\n        setVietNamSummary(res.data);\n\n      })\n      .catch((err) => console.error(err))\n\n    axios\n      .get('https://api.covid19api.com/live/country/singapore/status/confirmed')\n\n      .then((res) => {\n        setSingaporeSummary(res.data);\n\n      })\n      .catch((err) => console.error(err))\n\n    axios\n      .get('https://api.covid19api.com/live/country/thailand/status/confirmed')\n\n      .then((res) => {\n        setThaiLandSummary(res.data);\n\n      })\n      .catch((err) => console.error(err))\n\n    axios\n      .get('https://api.covid19api.com/live/country/cambodia/status/confirmed')\n\n      .then((res) => {\n        setLaosSummary(res.data);\n\n      })\n      .catch((err) => console.error(err))\n\n    axios\n      .get('https://api.covid19api.com/live/country/malaysia/status/confirmed')\n\n      .then((res) => {\n        setMalaysiaSummary(res.data);\n\n      })\n      .catch((err) => console.error(err))\n  }, []);\n\n  var countriesSummary = [...singaporeSummary, ...cambodiaSummary, ...malaysiaSummary, ...vietNamSummary, ...thaiLandSummary];\n\n  // console.log(singaporeSummary);\n  // console.log(malaysiaSummary);\n  // console.log(vietNamSummary);\n  // console.log(LaosSummary);\n  // console.log(thaiLandSummary);\n\n  var vietNamCollection = [];\n  var singaporeCollection = [];\n  var cambodiaCollection = [];\n  var malaysiaCollection = [];\n  var thailandCollection = [];\n  var vietNamToday = [];\n\n  var rows = [];\n  var count = 1;\n  for (const country of countriesSummary) {\n\n    country['indexNumber'] = count;\n    count++;\n    country['id'] = country['indexNumber'];\n    rows.push(country);\n  }\n\n\n  var currentDate = new Date();\n  var sevenDayAgo = new Date();\n  currentDate.setDate(currentDate.getDate());\n  sevenDayAgo.setDate(sevenDayAgo.getDate() - 7);\n\n\n\n  var temp = [];\n  for (const country of countriesSummary) {\n    temp.push(country.Date);\n  }\n  temp.sort();\n  var recentDay = temp[temp.length - 1];\n  recentDay = new Date(recentDay);\n  \n  for (const country of countriesSummary) {\n    var dayInArray = new Date(country['Date']);\n    if (dayInArray.getTime() >= sevenDayAgo.getTime() && dayInArray.getTime() <= recentDay.getTime()) {\n      if (country['Country'] === 'Viet Nam') {\n        vietNamCollection.push(country);\n        if (dayInArray.toLocaleDateString() === recentDay.toLocaleDateString()) {\n          vietNamToday.push(country);\n        }\n      }\n      if (country['Country'] === 'Singapore') {\n        singaporeCollection.push(country);\n\n      }\n      if (country['Country'] === 'Cambodia') {\n        cambodiaCollection.push(country);\n      }\n      if (country['Country'] === 'Malaysia') {\n        malaysiaCollection.push(country);\n\n      }\n      if (country['Country'] === 'Thailand') {\n        thailandCollection.push(country);\n      }\n    }\n  }\n\n  function getCountryConfirmedCases(countryCollection) {\n    var dataset = [];\n    for (const data of countryCollection) {\n      dataset.push(data.Confirmed);\n    }\n    return dataset.sort();\n  }\n\n  function getMonth(countryCollection) {\n    var dataset = [];\n    for (const data of countryCollection) {\n      dataset.push((new Date(data.Date).toLocaleDateString('fr-CA', { year: 'numeric', month: '2-digit', day: '2-digit' })))\n    }\n    return dataset.sort();\n  }\n\n  function getCountryConfirmedDeath(countryCollection) {\n    var dataset = [];\n    for (const data of countryCollection) {\n      dataset.push(data.Deaths)\n    }\n    return dataset;\n  }\n\n  function getonlyCountry(countryCollection) {\n    var dataset = [];\n    for (const data of countryCollection) {\n      dataset.push(data.Country)\n    }\n    return dataset;\n  }\n\n\n\n  var label = [];\n  for (const vn of vietNamCollection) {\n    label.push((new Date(vn.Date).toLocaleDateString()));\n  }\n  label.sort();\n\n  function getPieChartData(countryToday) {\n    var dataSetPieChart = [];\n    for (const data of countryToday) {\n      dataSetPieChart.push(data.Recovered);\n      dataSetPieChart.push(data.Deaths);\n      dataSetPieChart.push(data.Confirmed);\n      dataSetPieChart.push(data.Active);\n    }\n    return dataSetPieChart;\n  }\n\n  return (\n    <div>\n        <Bar\n          data={{\n            labels: ['Vietnam', 'Thailand', 'Cambodia', 'Malaysia', 'Singapore'],\n            datasets: [\n              {\n                label: 'Doses Given In Million',\n                data: [20.2, 31.8, 19.2, 55, 36.1],\n                fill: false,\n                backgroundColor: [\n                'rgba(255, 99, 132, 0.2)',\n                ],\n                borderColor: [\n                'rgba(255, 99, 132, 1)',\n                ],\n                borderWidth: 2,\n                maxBarThickness: 30,\n              },\n              {\n                label: 'Fully Vaccinated In Million',\n                data: [2.73, 7.78, 8.59, 15.8, 4.44],\n                fill: false,\n                backgroundColor: [\n                'rgba(54, 162, 235, 0.2)',\n                ],\n                borderColor: [\n                'rgba(54, 162, 235, 1)',\n                ],\n                borderWidth: 2,\n                maxBarThickness: 30,\n              },\n              {\n                label: '% Of Population Fully Vaccinated',\n                data: [2.8, 11.2, 52.1, 49.4, 77.9],\n                fill: false,\n                backgroundColor: [\n                  'rgba(255, 159, 64, 0.2)'\n                  ,\n                  ],\n                  borderColor: [\n                  'rgba(255, 159, 64, 1)'\n                  ],\n                  borderWidth: 2,\n                  maxBarThickness: 30,\n              }\n\n            ],\n          }}\n\n          options={{\n            indexAxis: 'y',\n            // Elements options apply to all of the options unless overridden in a dataset\n            // In this case, we are setting the border of each horizontal bar to be 2px wide\n            elements: {\n              bar: {\n                borderWidth: 2,\n              }\n            },\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n              }\n            }\n          }}\n        />\n    </div>\n  )\n}\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}