{"ast":null,"code":"import React from\"react\";import{Map as LeafletMap,TileLayer,Circle,Popup}from\"react-leaflet\";import'leaflet/dist/leaflet.css';import\"./Map.css\";function Map(_ref){var countries=_ref.countries,casesType=_ref.casesType,center=_ref.center,zoom=_ref.zoom;var numberFormat=function numberFormat(value){return new Intl.NumberFormat().format(value);};return/*#__PURE__*/React.createElement(\"div\",{className:\"map\"},/*#__PURE__*/React.createElement(LeafletMap,{center:center,zoom:zoom},/*#__PURE__*/React.createElement(TileLayer,{url:\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",attribution:\"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\"}),countries.map(function(country,i){return/*#__PURE__*/React.createElement(Circle,{key:i,center:[country.countryInfo.lat,country.countryInfo.long]// color={casesTypeColors[casesType].hex}\n,color:\"#ff0000\",fillColor:\"#ff0000\",fillOpacity:0.4,radius:Math.sqrt(country['cases'])*800},/*#__PURE__*/React.createElement(Popup,null,/*#__PURE__*/React.createElement(\"div\",{className:\"info-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"info-flag\",style:{backgroundImage:\"url(\".concat(country.countryInfo.flag,\")\")}}),/*#__PURE__*/React.createElement(\"div\",{className:\"info-name\"},country.country),/*#__PURE__*/React.createElement(\"div\",{className:\"info-confirmed\"},\"Cases: \",numberFormat(country.cases)),/*#__PURE__*/React.createElement(\"div\",{className:\"info-recovered\"},\"Recovered: \",numberFormat(country.recovered)),/*#__PURE__*/React.createElement(\"div\",{className:\"info-deaths\"},\"Deaths: \",numberFormat(country.deaths)))));})));}export default Map;","map":{"version":3,"sources":["/Users/mystery/Desktop/bookstore-v2/src/components/Map/Map.js"],"names":["React","Map","LeafletMap","TileLayer","Circle","Popup","countries","casesType","center","zoom","numberFormat","value","Intl","NumberFormat","format","map","country","i","countryInfo","lat","long","Math","sqrt","backgroundImage","flag","cases","recovered","deaths"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAG,GAAIC,CAAAA,UAAhB,CAA4BC,SAA5B,CAAuCC,MAAvC,CAA+CC,KAA/C,KAA4D,eAA5D,CACA,MAAO,0BAAP,CACA,MAAO,WAAP,CAEA,QAASJ,CAAAA,GAAT,MAAqD,IAAtCK,CAAAA,SAAsC,MAAtCA,SAAsC,CAA3BC,SAA2B,MAA3BA,SAA2B,CAAhBC,MAAgB,MAAhBA,MAAgB,CAARC,IAAQ,MAARA,IAAQ,CAEnD,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAW,CAC9B,MAAO,IAAIC,CAAAA,IAAI,CAACC,YAAT,GAAwBC,MAAxB,CAA+BH,KAA/B,CAAP,CACD,CAFD,CAIA,mBACE,2BAAK,SAAS,CAAC,KAAf,eACE,oBAAC,UAAD,EAAY,MAAM,CAAEH,MAApB,CAA4B,IAAI,CAAEC,IAAlC,eACE,oBAAC,SAAD,EACE,GAAG,CAAC,oDADN,CAEE,WAAW,CAAC,0EAFd,EADF,CAKGH,SAAS,CAACS,GAAV,CAAc,SAACC,OAAD,CAAUC,CAAV,qBACb,oBAAC,MAAD,EACE,GAAG,CAAEA,CADP,CAEE,MAAM,CAAE,CAACD,OAAO,CAACE,WAAR,CAAoBC,GAArB,CAA0BH,OAAO,CAACE,WAAR,CAAoBE,IAA9C,CACR;AAHF,CAIE,KAAK,CAAC,SAJR,CAKE,SAAS,CAAC,SALZ,CAME,WAAW,CAAE,GANf,CAOE,MAAM,CACJC,IAAI,CAACC,IAAL,CAAUN,OAAO,CAAC,OAAD,CAAjB,EAA8B,GARlC,eAWE,oBAAC,KAAD,mBACE,2BAAK,SAAS,CAAC,gBAAf,eACE,2BACE,SAAS,CAAC,WADZ,CAEE,KAAK,CAAE,CAAEO,eAAe,eAASP,OAAO,CAACE,WAAR,CAAoBM,IAA7B,KAAjB,CAFT,EADF,cAKE,2BAAK,SAAS,CAAC,WAAf,EAA4BR,OAAO,CAACA,OAApC,CALF,cAME,2BAAK,SAAS,CAAC,gBAAf,YAGUN,YAAY,CAACM,OAAO,CAACS,KAAT,CAHtB,CANF,cAWE,2BAAK,SAAS,CAAC,gBAAf,gBACcf,YAAY,CAACM,OAAO,CAACU,SAAT,CAD1B,CAXF,cAcE,2BAAK,SAAS,CAAC,aAAf,aACWhB,YAAY,CAACM,OAAO,CAACW,MAAT,CADvB,CAdF,CADF,CAXF,CADa,EAAd,CALH,CADF,CADF,CA4CD,CAED,cAAe1B,CAAAA,GAAf","sourcesContent":["import React from \"react\";\nimport { Map as LeafletMap, TileLayer, Circle, Popup } from \"react-leaflet\";\nimport 'leaflet/dist/leaflet.css'\nimport \"./Map.css\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n\n  const numberFormat = (value) => {\n    return new Intl.NumberFormat().format(value);\n  }\n\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {countries.map((country, i) => (\n          <Circle\n            key={i}\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            // color={casesTypeColors[casesType].hex}\n            color=\"#ff0000\"\n            fillColor=\"#ff0000\"\n            fillOpacity={0.4}\n            radius={\n              Math.sqrt(country['cases']) * 800\n            }\n          >\n            <Popup>\n              <div className=\"info-container\">\n                <div\n                  className=\"info-flag\"\n                  style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n                ></div>\n                <div className=\"info-name\">{country.country}</div>\n                <div className=\"info-confirmed\">\n                  {/* Cases: {numeral(country.cases).format(\"0,0\")}\n                   */}\n                  Cases: {numberFormat(country.cases)}\n                </div>\n                <div className=\"info-recovered\">\n                  Recovered: {numberFormat(country.recovered)}\n                </div>\n                <div className=\"info-deaths\">\n                  Deaths: {numberFormat(country.deaths)}\n                </div>\n              </div>\n            </Popup>\n          </Circle>\n        ))}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}