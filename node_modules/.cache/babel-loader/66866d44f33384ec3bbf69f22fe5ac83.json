{"ast":null,"code":"var _jsxFileName = \"/Users/mystery/Desktop/bookstore-v2/src/pages/UltimateDashboard.js\";\nimport React from \"react\";\nimport Helmet from \"react-helmet\";\nimport L from \"leaflet\";\nimport axios from \"axios\";\nimport Layout from \"../components/Layout\";\nimport Map from \"../components/Map\";\nconst LOCATION = {\n  lat: 0,\n  lng: 0\n};\nconst CENTER = [LOCATION.lat, LOCATION.lng];\nconst DEFAULT_ZOOM = 3;\nconst MIN_ZOOM = 2;\nconst API = \"https://corona.lmao.ninja/v2/countries\";\n\nconst IndexPage = () => {\n  async function mapEffect({\n    leafletElement: map\n  } = {}) {\n    let response;\n\n    try {\n      response = await axios.get(API);\n    } catch (err) {\n      console.log(\"erro\", err);\n      return;\n    }\n\n    console.log(\"response\", response);\n    const {\n      data = []\n    } = response;\n    const hasData = Array.isArray(data) && data.length > 0;\n    if (!hasData) return;\n    const geoJson = {\n      type: \"FeatureCollection\",\n      features: data.map((country = {}) => {\n        const {\n          countryInfo = {}\n        } = country;\n        const {\n          lat,\n          long: lng\n        } = countryInfo;\n        return {\n          type: \"Feature\",\n          properties: { ...country\n          },\n          geometry: {\n            type: \"Point\",\n            coordinates: [lng, lat]\n          }\n        };\n      })\n    };\n    const geoJsonLayers = new L.GeoJSON(geoJson, {\n      pointToLayer: (feature = {}, latlng) => {\n        const {\n          properties = {}\n        } = feature;\n        let updatedFormatted;\n        let casesString;\n        const {\n          country,\n          updated,\n          cases,\n          deaths,\n          recovered\n        } = properties;\n        casesString = `${cases}`;\n\n        if (cases > 1000) {\n          casesString = `${casesString.slice(0, -3)}k+`;\n        }\n\n        if (updated) {\n          updatedFormatted = new Date(updated).toLocaleString();\n        }\n\n        const html = `\n            <span class=\"icon-marker\">\n            <span class=\"icon-marker-tooltip\">\n              <h2>${country}</h2>\n              <ul>\n                <li><strong>Confirmed:</strong> ${cases}</li>\n                <li><strong>Deaths:</strong> ${deaths}</li>\n                <li><strong>Recovered:</strong> ${recovered}</li>\n                <li><strong>Last Update:</strong> ${updatedFormatted}</li>\n              </ul>\n            </span>\n            ${casesString}\n        </span>\n      `;\n        return L.marker(latlng, {\n          icon: L.divIcon({\n            className: \"icon\",\n            html\n          }),\n          riseOnHover: true\n        });\n      }\n    });\n    geoJsonLayers.addTo(map);\n  }\n\n  const mapSettings = {\n    center: CENTER,\n    defaultBaseMap: \"OpenStreetMap\",\n    zoom: DEFAULT_ZOOM,\n    minZoom: MIN_ZOOM,\n    mapEffect\n  };\n  return /*#__PURE__*/React.createElement(Layout, {\n    pageName: \"home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, \"Home\")), /*#__PURE__*/React.createElement(Map, Object.assign({}, mapSettings, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default IndexPage;","map":{"version":3,"sources":["/Users/mystery/Desktop/bookstore-v2/src/pages/UltimateDashboard.js"],"names":["React","Helmet","L","axios","Layout","Map","LOCATION","lat","lng","CENTER","DEFAULT_ZOOM","MIN_ZOOM","API","IndexPage","mapEffect","leafletElement","map","response","get","err","console","log","data","hasData","Array","isArray","length","geoJson","type","features","country","countryInfo","long","properties","geometry","coordinates","geoJsonLayers","GeoJSON","pointToLayer","feature","latlng","updatedFormatted","casesString","updated","cases","deaths","recovered","slice","Date","toLocaleString","html","marker","icon","divIcon","className","riseOnHover","addTo","mapSettings","center","defaultBaseMap","zoom","minZoom"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport L from \"leaflet\";\nimport axios from \"axios\";\nimport Layout from \"../components/Layout\";\nimport Map from \"../components/Map\";\n\nconst LOCATION = {\n  lat: 0,\n  lng: 0,\n};\nconst CENTER = [LOCATION.lat, LOCATION.lng];\nconst DEFAULT_ZOOM = 3;\nconst MIN_ZOOM = 2;\nconst API = \"https://corona.lmao.ninja/v2/countries\"\n\nconst IndexPage = () => {\n\n  async function mapEffect({ leafletElement: map } = {}) {\n    let response;\n\n    try {\n      response = await axios.get(API);\n    } catch (err) {\n      console.log(\"erro\", err);\n      return;\n    }\n    console.log(\"response\", response);\n\n    const { data = [] } = response;\n    const hasData = Array.isArray(data) && data.length > 0;\n\n    if (!hasData) return;\n\n    const geoJson = {\n      type: \"FeatureCollection\",\n      features: data.map((country = {}) => {\n        const { countryInfo = {} } = country;\n        const { lat, long: lng } = countryInfo;\n        return {\n          type: \"Feature\",\n          properties: {\n            ...country,\n          },\n          geometry: {\n            type: \"Point\",\n            coordinates: [lng, lat],\n          },\n        };\n      }),\n    };\n\n    const geoJsonLayers = new L.GeoJSON(geoJson, {\n      pointToLayer: (feature = {}, latlng) => {\n        const { properties = {} } = feature;\n        let updatedFormatted;\n        let casesString;\n\n        const { country, updated, cases, deaths, recovered } = properties;\n\n        casesString = `${cases}`;\n\n        if (cases > 1000) {\n          casesString = `${casesString.slice(0, -3)}k+`;\n        }\n\n        if (updated) {\n          updatedFormatted = new Date(updated).toLocaleString();\n        }\n\n        const html = `\n            <span class=\"icon-marker\">\n            <span class=\"icon-marker-tooltip\">\n              <h2>${country}</h2>\n              <ul>\n                <li><strong>Confirmed:</strong> ${cases}</li>\n                <li><strong>Deaths:</strong> ${deaths}</li>\n                <li><strong>Recovered:</strong> ${recovered}</li>\n                <li><strong>Last Update:</strong> ${updatedFormatted}</li>\n              </ul>\n            </span>\n            ${casesString}\n        </span>\n      `;\n\n        return L.marker(latlng, {\n          icon: L.divIcon({\n            className: \"icon\",\n            html,\n          }),\n          riseOnHover: true,\n        });\n      },\n    });\n    \n    geoJsonLayers.addTo(map);\n  }\n\n  const mapSettings = {\n    center: CENTER,\n    defaultBaseMap: \"OpenStreetMap\",\n    zoom: DEFAULT_ZOOM,\n    minZoom: MIN_ZOOM,\n    mapEffect,\n  };\n\n  return (\n    <Layout pageName=\"home\">\n      <Helmet>\n        <title>Home</title>\n      </Helmet>\n\n      <Map {...mapSettings} />\n\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}