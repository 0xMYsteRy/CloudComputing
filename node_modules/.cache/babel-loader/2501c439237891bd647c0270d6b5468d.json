{"ast":null,"code":"var _jsxFileName = \"/Users/mystery/Desktop/bookstore-v2/src/components/Graphs/Line.js\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport React from \"react\";\nimport { Line } from 'react-chartjs-2';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  data: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    width: '74vw',\n    border: \"none\",\n    boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n    borderRadius: \"15px\"\n  }\n}));\nexport default function CountriesLine() {\n  const [vietNamSummary, setVietNamSummary] = useState([]);\n  const [cambodiaSummary, setLaosSummary] = useState([]);\n  const [thaiLandSummary, setThaiLandSummary] = useState([]);\n  const [malaysiaSummary, setMalaysiaSummary] = useState([]);\n  const [singaporeSummary, setSingaporeSummary] = useState([]);\n  useEffect(() => {\n    axios.get('https://api.covid19api.com/live/country/vietnam/status/confirmed').then(res => {\n      setVietNamSummary(res.data);\n    }).catch(err => console.error(err));\n    axios.get('https://api.covid19api.com/live/country/singapore/status/confirmed').then(res => {\n      setSingaporeSummary(res.data);\n    }).catch(err => console.error(err));\n    axios.get('https://api.covid19api.com/live/country/thailand/status/confirmed').then(res => {\n      setThaiLandSummary(res.data);\n    }).catch(err => console.error(err));\n    axios.get('https://api.covid19api.com/live/country/cambodia/status/confirmed').then(res => {\n      setLaosSummary(res.data);\n    }).catch(err => console.error(err));\n    axios.get('https://api.covid19api.com/live/country/malaysia/status/confirmed').then(res => {\n      setMalaysiaSummary(res.data);\n    }).catch(err => console.error(err));\n  }, []);\n  var countriesSummary = [...singaporeSummary, ...cambodiaSummary, ...malaysiaSummary, ...vietNamSummary, ...thaiLandSummary]; // console.log(countriesSummary);\n  // console.log(singaporeSummary);\n  // console.log(malaysiaSummary);\n  // console.log(vietNamSummary);\n  // console.log(LaosSummary);\n  // console.log(thaiLandSummary);\n\n  const columns = [{\n    field: 'id',\n    headerName: 'tableId',\n    width: 300\n  }, {\n    field: 'ID',\n    headerName: 'id',\n    width: 300\n  }, {\n    field: 'Country',\n    headerName: 'Country',\n    width: 150,\n    editable: true\n  }, {\n    field: 'Confirmed',\n    headerName: 'Confirmed cases',\n    width: 220,\n    type: 'number'\n  }, {\n    field: 'Deaths',\n    headerName: 'Deaths',\n    type: 'number',\n    width: 160\n  }, {\n    field: 'Recovered',\n    headerName: 'Recovered cases',\n    width: 220,\n    editable: true,\n    type: 'number'\n  }, {\n    field: 'Active',\n    headerName: 'Active cases',\n    width: 160,\n    type: 'number'\n  }, {\n    field: 'Date',\n    headerName: 'Date',\n    width: 220,\n    type: 'number'\n  }];\n  var vietNamCollection = [];\n  var singaporeCollection = [];\n  var cambodiaCollection = [];\n  var malaysiaCollection = [];\n  var thailandCollection = [];\n  var vietNamToday = [];\n  var rows = [];\n  var count = 1;\n\n  for (const country of countriesSummary) {\n    country['indexNumber'] = count;\n    count++;\n    country['id'] = country['indexNumber'];\n    rows.push(country);\n  }\n\n  var currentDate = new Date();\n  var sevenDayAgo = new Date();\n  currentDate.setDate(currentDate.getDate());\n  sevenDayAgo.setDate(sevenDayAgo.getDate() - 7);\n  var temp = [];\n\n  for (const country of countriesSummary) {\n    temp.push(country.Date);\n  }\n\n  temp.sort();\n  var recentDay = temp[temp.length - 1];\n  recentDay = new Date(recentDay);\n  console.log(recentDay);\n\n  for (const country of countriesSummary) {\n    var dayInArray = new Date(country['Date']);\n\n    if (dayInArray.getTime() >= sevenDayAgo.getTime() && dayInArray.getTime() <= recentDay.getTime()) {\n      if (country['Country'] === 'Viet Nam') {\n        vietNamCollection.push(country);\n\n        if (dayInArray.toLocaleDateString() === recentDay.toLocaleDateString()) {\n          vietNamToday.push(country);\n        }\n      }\n\n      if (country['Country'] === 'Singapore') {\n        singaporeCollection.push(country);\n      }\n\n      if (country['Country'] === 'Cambodia') {\n        cambodiaCollection.push(country);\n      }\n\n      if (country['Country'] === 'Malaysia') {\n        malaysiaCollection.push(country);\n      }\n\n      if (country['Country'] === 'Thailand') {\n        thailandCollection.push(country);\n      }\n    }\n  }\n\n  function getCountryConfirmedCases(countryCollection) {\n    var dataset = [];\n\n    for (const data of countryCollection) {\n      dataset.push(data.Confirmed);\n    }\n\n    return dataset.sort();\n  }\n\n  function getMonth(countryCollection) {\n    var dataset = [];\n\n    for (const data of countryCollection) {\n      dataset.push(new Date(data.Date).toLocaleDateString('fr-CA', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n      }));\n    }\n\n    return dataset.sort();\n  }\n\n  console.log(getMonth(vietNamSummary));\n\n  function getCountryConfirmedDeath(countryCollection) {\n    var dataset = [];\n\n    for (const data of countryCollection) {\n      dataset.push(data.Deaths);\n    }\n\n    return dataset;\n  }\n\n  console.log(getCountryConfirmedDeath(vietNamSummary));\n  var label = [];\n\n  for (const vn of vietNamCollection) {\n    label.push(new Date(vn.Date).toLocaleDateString());\n  }\n\n  label.sort();\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: getMonth(vietNamSummary),\n      datasets: [{\n        label: 'Vietnam Total Cases ',\n        data: getCountryConfirmedDeath(vietNamSummary),\n        backgroundColor: ['rgba(255, 99, 132, 0.2)'],\n        borderColor: ['rgba(255, 99, 132, 1)'],\n        borderWidth: 2,\n        maxBarThickness: 30\n      }, {\n        label: 'Malaysia Total Cases ',\n        data: getCountryConfirmedDeath(malaysiaSummary),\n        backgroundColor: ['rgba(255, 159, 64, 0.2)'],\n        borderColor: ['rgba(255, 159, 64, 1)'],\n        borderWidth: 2,\n        maxBarThickness: 30\n      }, {\n        label: 'Cambodia Total Cases ',\n        data: getCountryConfirmedDeath(cambodiaSummary),\n        backgroundColor: ['rgba(153, 102, 255, 0.2)'],\n        borderColor: ['rgba(153, 102, 255, 1)'],\n        borderWidth: 2,\n        maxBarThickness: 30\n      }, {\n        label: 'Singapore Total Cases ',\n        data: getCountryConfirmedDeath(singaporeSummary),\n        backgroundColor: ['rgba(75, 192, 192, 0.2)'],\n        borderColor: ['rgba(75, 192, 192, 1)'],\n        borderWidth: 2,\n        maxBarThickness: 30\n      }, {\n        label: 'Thailand Total Case',\n        data: getCountryConfirmedDeath(thaiLandSummary),\n        backgroundColor: ['rgba(54, 162, 235, 0.2)'],\n        borderColor: ['rgba(54, 162, 235, 1)'],\n        borderWidth: 2,\n        maxBarThickness: 30\n      }]\n    },\n    height: 600,\n    width: 600,\n    options: {\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: true,\n          labels: {\n            color: 'rgb(255, 99, 132)',\n            font: {\n              size: 18\n            }\n          }\n        }\n      },\n      scales: {\n        yAxes: [{\n          color: 'red',\n          font: {\n            size: 25\n          },\n          ticks: {\n            tickColor: 'red',\n            beginAtZero: false\n          }\n        }]\n      },\n      legend: {\n        labels: {\n          fontSize: 25\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/mystery/Desktop/bookstore-v2/src/components/Graphs/Line.js"],"names":["axios","useState","useEffect","React","Line","makeStyles","useStyles","theme","data","background","width","border","boxShadow","borderRadius","CountriesLine","vietNamSummary","setVietNamSummary","cambodiaSummary","setLaosSummary","thaiLandSummary","setThaiLandSummary","malaysiaSummary","setMalaysiaSummary","singaporeSummary","setSingaporeSummary","get","then","res","catch","err","console","error","countriesSummary","columns","field","headerName","editable","type","vietNamCollection","singaporeCollection","cambodiaCollection","malaysiaCollection","thailandCollection","vietNamToday","rows","count","country","push","currentDate","Date","sevenDayAgo","setDate","getDate","temp","sort","recentDay","length","log","dayInArray","getTime","toLocaleDateString","getCountryConfirmedCases","countryCollection","dataset","Confirmed","getMonth","year","month","day","getCountryConfirmedDeath","Deaths","label","vn","classes","labels","datasets","backgroundColor","borderColor","borderWidth","maxBarThickness","maintainAspectRatio","plugins","legend","display","color","font","size","scales","yAxes","ticks","tickColor","beginAtZero","fontSize"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport React from \"react\";\nimport { Line } from 'react-chartjs-2';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    data:\n    {\n      background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n      width: '74vw',\n      border: \"none\",\n      boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n      borderRadius: \"15px\",\n    }\n  }));\n\nexport default function CountriesLine() {\n    const [vietNamSummary, setVietNamSummary] = useState([]);\n    const [cambodiaSummary, setLaosSummary] = useState([]);\n    const [thaiLandSummary, setThaiLandSummary] = useState([]);\n    const [malaysiaSummary, setMalaysiaSummary] = useState([]);\n    const [singaporeSummary, setSingaporeSummary] = useState([]);\n\n    useEffect(() => {\n        axios\n        .get('https://api.covid19api.com/live/country/vietnam/status/confirmed')\n\n        .then((res) => {\n            setVietNamSummary(res.data);\n\n        })\n        .catch((err) => console.error(err))\n\n        axios\n        .get('https://api.covid19api.com/live/country/singapore/status/confirmed')\n\n        .then((res) => {\n            setSingaporeSummary(res.data);\n\n        })\n        .catch((err) => console.error(err))\n\n        axios\n        .get('https://api.covid19api.com/live/country/thailand/status/confirmed')\n\n        .then((res) => {\n            setThaiLandSummary(res.data);\n\n        })\n        .catch((err) => console.error(err))\n\n        axios\n        .get('https://api.covid19api.com/live/country/cambodia/status/confirmed')\n\n        .then((res) => {\n            setLaosSummary(res.data);\n\n        })\n        .catch((err) => console.error(err))\n\n        axios\n        .get('https://api.covid19api.com/live/country/malaysia/status/confirmed')\n\n        .then((res) => {\n            setMalaysiaSummary(res.data);\n\n        })\n        .catch((err) => console.error(err))\n\n    }, []);\n\n    var countriesSummary = [...singaporeSummary, ...cambodiaSummary, ...malaysiaSummary, ...vietNamSummary, ...thaiLandSummary];\n\n    // console.log(countriesSummary);\n    // console.log(singaporeSummary);\n    // console.log(malaysiaSummary);\n    // console.log(vietNamSummary);\n    // console.log(LaosSummary);\n    // console.log(thaiLandSummary);\n\n\n    const columns = [\n\n        { field: 'id', headerName: 'tableId', width: 300 },\n        { field: 'ID', headerName: 'id', width: 300 },\n        {\n        field: 'Country',\n        headerName: 'Country',\n        width: 150,\n        editable: true,\n        },\n        {\n        field: 'Confirmed',\n        headerName: 'Confirmed cases',\n        width: 220,\n        type: 'number',\n        },\n        {\n        field: 'Deaths',\n        headerName: 'Deaths',\n        type: 'number',\n        width: 160,\n        },\n        {\n        field: 'Recovered',\n        headerName: 'Recovered cases',\n        width: 220,\n        editable: true,\n        type: 'number',\n        },\n        {\n        field: 'Active',\n        headerName: 'Active cases',\n        width: 160,\n        type: 'number',\n        },\n        {\n        field: 'Date',\n        headerName: 'Date',\n        width: 220,\n        type: 'number',\n        },\n    ];\n\n    var vietNamCollection = [];\n    var singaporeCollection = [];\n    var cambodiaCollection = [];\n    var malaysiaCollection = [];\n    var thailandCollection = [];\n    var vietNamToday = [];\n\n    var rows = [];\n    var count = 1;\n    for (const country of countriesSummary) {\n\n        country['indexNumber'] = count;\n        count++;\n        country['id'] = country['indexNumber'];\n        rows.push(country);\n    }\n\n\n    var currentDate = new Date();\n    var sevenDayAgo = new Date();\n    currentDate.setDate(currentDate.getDate());\n    sevenDayAgo.setDate(sevenDayAgo.getDate() - 7);\n\n\n\n\n    var temp = [];\n    for (const country of countriesSummary) {\n        temp.push(country.Date);\n    }\n    temp.sort();\n    var recentDay = temp[temp.length - 1];\n    recentDay = new Date(recentDay);\n    console.log(recentDay);\n\n    for (const country of countriesSummary) {\n        var dayInArray = new Date(country['Date']);\n        if (dayInArray.getTime() >= sevenDayAgo.getTime() && dayInArray.getTime() <= recentDay.getTime()) {\n        if (country['Country'] === 'Viet Nam') {\n            vietNamCollection.push(country);\n            if (dayInArray.toLocaleDateString() === recentDay.toLocaleDateString()) {\n            vietNamToday.push(country);\n            }\n        }\n        if (country['Country'] === 'Singapore') {\n            singaporeCollection.push(country);\n\n        }\n        if (country['Country'] === 'Cambodia') {\n            cambodiaCollection.push(country);\n        }\n        if (country['Country'] === 'Malaysia') {\n            malaysiaCollection.push(country);\n\n        }\n        if (country['Country'] === 'Thailand') {\n            thailandCollection.push(country);\n        }\n        }\n    }\n\n    function getCountryConfirmedCases(countryCollection) {\n        var dataset = [];\n        for (const data of countryCollection) {\n        dataset.push(data.Confirmed);\n        }\n        return dataset.sort();\n    }\n\n    function getMonth(countryCollection) {\n        var dataset = [];\n        for (const data of countryCollection) {\n        dataset.push((new Date(data.Date).toLocaleDateString('fr-CA', { year: 'numeric', month: '2-digit', day: '2-digit' })))\n        }\n        return dataset.sort();\n    }\n    console.log(getMonth(vietNamSummary));\n\n    function getCountryConfirmedDeath(countryCollection) {\n        var dataset = [];\n        for (const data of countryCollection) {\n        dataset.push(data.Deaths)\n        }\n        return dataset;\n    }\n\n    console.log(getCountryConfirmedDeath(vietNamSummary))\n\n    var label = [];\n    for (const vn of vietNamCollection) {\n        label.push((new Date(vn.Date).toLocaleDateString()));\n    }\n    label.sort();\n\n    const classes = useStyles();\n    return (\n        < div>\n            <Line\n            data={{\n                labels: getMonth(vietNamSummary),\n                datasets: [\n                {\n                    label: 'Vietnam Total Cases ',\n                    data: getCountryConfirmedDeath(vietNamSummary),\n                    backgroundColor: [\n                    'rgba(255, 99, 132, 0.2)',\n                    ],\n                    borderColor: [\n                    'rgba(255, 99, 132, 1)',\n                    ],\n                    borderWidth: 2,\n                    maxBarThickness: 30,\n                },\n                {\n                    label: 'Malaysia Total Cases ',\n                    data: getCountryConfirmedDeath(malaysiaSummary),\n                    backgroundColor: [\n                    'rgba(255, 159, 64, 0.2)'\n                    ,\n                    ],\n                    borderColor: [\n                    'rgba(255, 159, 64, 1)'\n                    ],\n                    borderWidth: 2,\n                    maxBarThickness: 30,\n                },\n                {\n                    label: 'Cambodia Total Cases ',\n                    data: getCountryConfirmedDeath(cambodiaSummary),\n                    backgroundColor: [\n                    'rgba(153, 102, 255, 0.2)',\n\n                    ],\n                    borderColor: [\n                    'rgba(153, 102, 255, 1)',\n\n                    ],\n                    borderWidth: 2,\n                    maxBarThickness: 30,\n                },\n                {\n                    label: 'Singapore Total Cases ',\n                    data: getCountryConfirmedDeath(singaporeSummary),\n                    backgroundColor: [\n                    'rgba(75, 192, 192, 0.2)',\n\n                    ],\n                    borderColor: [\n                    'rgba(75, 192, 192, 1)',\n\n                    ],\n                    borderWidth: 2,\n                    maxBarThickness: 30,\n                },\n                {\n                    label: 'Thailand Total Case',\n                    data: getCountryConfirmedDeath(thaiLandSummary),\n                    backgroundColor: [\n                    'rgba(54, 162, 235, 0.2)',\n                    ],\n                    borderColor: [\n                    'rgba(54, 162, 235, 1)',\n                    ],\n                    borderWidth: 2,\n                    maxBarThickness: 30,\n                }\n                ],\n            }}\n            height={600}\n            width={600}\n            options={{\n                maintainAspectRatio: false,\n                plugins: {\n                legend: {\n                    display: true,\n                    labels: {\n                    color: 'rgb(255, 99, 132)',\n                    font: {\n                        size: 18\n                    }\n                    }\n                }\n                },\n                scales: {\n                yAxes: [\n                    {\n                    color: 'red',\n                    font: {\n                        size: 25\n                    },\n                    ticks: {\n                        tickColor: 'red',\n                        beginAtZero: false,\n                    },\n                    },\n                ],\n                },\n                legend: {\n                labels: {\n                    fontSize: 25,\n                },\n                },\n            }}\n            />\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}