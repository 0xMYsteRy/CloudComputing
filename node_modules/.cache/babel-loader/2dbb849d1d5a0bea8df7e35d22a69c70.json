{"ast":null,"code":"var _jsxFileName = \"/Users/mystery/Desktop/bookstore-v2/src/components/Graphs/Doughnut.js\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport React from \"react\";\nimport { Doughnut } from 'react-chartjs-2';\nexport default function DashDoughnut() {\n  const [vietNamSummary, setVietNamSummary] = useState([]);\n  const [cambodiaSummary, setLaosSummary] = useState([]);\n  const [thaiLandSummary, setThaiLandSummary] = useState([]);\n  const [malaysiaSummary, setMalaysiaSummary] = useState([]);\n  const [singaporeSummary, setSingaporeSummary] = useState([]);\n  useEffect(() => {\n    axios.get('https://api.covid19api.com/live/country/vietnam/status/confirmed').then(res => {\n      setVietNamSummary(res.data);\n    }).catch(err => console.error(err));\n    axios.get('https://api.covid19api.com/live/country/singapore/status/confirmed').then(res => {\n      setSingaporeSummary(res.data);\n    }).catch(err => console.error(err));\n    axios.get('https://api.covid19api.com/live/country/thailand/status/confirmed').then(res => {\n      setThaiLandSummary(res.data);\n    }).catch(err => console.error(err));\n    axios.get('https://api.covid19api.com/live/country/cambodia/status/confirmed').then(res => {\n      setLaosSummary(res.data);\n    }).catch(err => console.error(err));\n    axios.get('https://api.covid19api.com/live/country/malaysia/status/confirmed').then(res => {\n      setMalaysiaSummary(res.data);\n    }).catch(err => console.error(err));\n  }, []);\n  var countriesSummary = [...singaporeSummary, ...cambodiaSummary, ...malaysiaSummary, ...vietNamSummary, ...thaiLandSummary];\n  console.log(countriesSummary);\n  var vietNamCollection = [];\n  var vietNamToday = [];\n  var rows = [];\n  var count = 1;\n\n  for (const country of vietNamSummary) {\n    country['indexNumber'] = count;\n    count++;\n    country['id'] = country['indexNumber'];\n    rows.push(country);\n  }\n\n  var currentDate = new Date();\n  var sevenDayAgo = new Date();\n  currentDate.setDate(currentDate.getDate());\n  sevenDayAgo.setDate(sevenDayAgo.getDate() - 7);\n  var temp = [];\n\n  for (const country of countriesSummary) {\n    temp.push(country.Date);\n  }\n\n  temp.sort();\n  var recentDay = temp[temp.length - 1];\n  recentDay = new Date(recentDay);\n  console.log(recentDay);\n\n  for (const country of countriesSummary) {\n    var dayInArray = new Date(country['Date']);\n\n    if (dayInArray.getTime() >= sevenDayAgo.getTime() && dayInArray.getTime() <= recentDay.getTime()) {\n      if (country['Country'] === 'Viet Nam') {\n        vietNamCollection.push(country);\n\n        if (dayInArray.toLocaleDateString() === recentDay.toLocaleDateString()) {\n          vietNamToday.push(country);\n        }\n      }\n    }\n  }\n\n  function getPieChartData(countryToday) {\n    var dataSetPieChart = [];\n\n    for (const data of countryToday) {\n      dataSetPieChart.push(data.Recovered);\n      dataSetPieChart.push(data.Deaths);\n      dataSetPieChart.push(data.Confirmed);\n      dataSetPieChart.push(data.Active);\n    }\n\n    return dataSetPieChart;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Doughnut, {\n    data: {\n      labels: ['Recovered', 'Deaths', 'Confirmed', 'Active'],\n      datasets: [{\n        label: 'Dataset1',\n        data: getPieChartData(vietNamToday),\n        backgroundColor: ['rgb(142, 195, 195)', 'rgb(255,69,0)', 'rgb(39,70,135)', 'rgb(255,215,0)'],\n        borderWidth: 2,\n        maxBarThickness: 30\n      }]\n    },\n    height: 400,\n    width: 400,\n    margin: 20,\n    options: {\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: true,\n          labels: {\n            font: {\n              size: 18\n            }\n          }\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/mystery/Desktop/bookstore-v2/src/components/Graphs/Doughnut.js"],"names":["axios","useState","useEffect","React","Doughnut","DashDoughnut","vietNamSummary","setVietNamSummary","cambodiaSummary","setLaosSummary","thaiLandSummary","setThaiLandSummary","malaysiaSummary","setMalaysiaSummary","singaporeSummary","setSingaporeSummary","get","then","res","data","catch","err","console","error","countriesSummary","log","vietNamCollection","vietNamToday","rows","count","country","push","currentDate","Date","sevenDayAgo","setDate","getDate","temp","sort","recentDay","length","dayInArray","getTime","toLocaleDateString","getPieChartData","countryToday","dataSetPieChart","Recovered","Deaths","Confirmed","Active","labels","datasets","label","backgroundColor","borderWidth","maxBarThickness","maintainAspectRatio","plugins","legend","display","font","size"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport { useState, useEffect } from \"react\"\nimport React from \"react\"\nimport { Doughnut } from 'react-chartjs-2';\n\nexport default function DashDoughnut() {\n    const [vietNamSummary, setVietNamSummary] = useState([]);\n    const [cambodiaSummary, setLaosSummary] = useState([]);\n    const [thaiLandSummary, setThaiLandSummary] = useState([]);\n    const [malaysiaSummary, setMalaysiaSummary] = useState([]);\n    const [singaporeSummary, setSingaporeSummary] = useState([]);\n\n\n    useEffect(() => {\n    \n        axios\n            .get('https://api.covid19api.com/live/country/vietnam/status/confirmed')\n\n            .then((res) => {\n                setVietNamSummary(res.data);\n\n            })\n            .catch((err) => console.error(err))\n\n        axios\n            .get('https://api.covid19api.com/live/country/singapore/status/confirmed')\n\n            .then((res) => {\n                setSingaporeSummary(res.data);\n\n            })\n            .catch((err) => console.error(err))\n\n        axios\n            .get('https://api.covid19api.com/live/country/thailand/status/confirmed')\n\n            .then((res) => {\n                setThaiLandSummary(res.data);\n\n            })\n            .catch((err) => console.error(err))\n\n        axios\n            .get('https://api.covid19api.com/live/country/cambodia/status/confirmed')\n\n            .then((res) => {\n                setLaosSummary(res.data);\n\n            })\n            .catch((err) => console.error(err))\n\n        axios\n            .get('https://api.covid19api.com/live/country/malaysia/status/confirmed')\n\n            .then((res) => {\n                setMalaysiaSummary(res.data);\n\n            })\n            .catch((err) => console.error(err))\n\n    }, []);\n\n    var countriesSummary = [...singaporeSummary, ...cambodiaSummary, ...malaysiaSummary, ...vietNamSummary, ...thaiLandSummary];\n   console.log(countriesSummary);\n\n    var vietNamCollection = [];\n    var vietNamToday = [];\n\n    var rows = [];\n    var count = 1;\n    for (const country of vietNamSummary) {\n\n        country['indexNumber'] = count;\n        count++;\n        country['id'] = country['indexNumber'];\n        rows.push(country);\n    }\n\n\n    var currentDate = new Date();\n    var sevenDayAgo = new Date();\n    currentDate.setDate(currentDate.getDate());\n    sevenDayAgo.setDate(sevenDayAgo.getDate() - 7);\n\n\n    var temp = [];\n    for (const country of countriesSummary) {\n        temp.push(country.Date);\n    }\n    temp.sort();\n    var recentDay = temp[temp.length - 1];\n    recentDay = new Date(recentDay);\n    console.log(recentDay);\n\n    for (const country of countriesSummary) {\n        var dayInArray = new Date(country['Date']);\n        if (dayInArray.getTime() >= sevenDayAgo.getTime() && dayInArray.getTime() <= recentDay.getTime()) {\n            if (country['Country'] === 'Viet Nam') {\n                vietNamCollection.push(country);\n                if (dayInArray.toLocaleDateString() === recentDay.toLocaleDateString()) {\n                    vietNamToday.push(country);\n                }\n            }\n        }\n    }\n    function getPieChartData(countryToday) {\n        var dataSetPieChart = [];\n        for (const data of countryToday) {\n            dataSetPieChart.push(data.Recovered);\n            dataSetPieChart.push(data.Deaths);\n            dataSetPieChart.push(data.Confirmed);\n            dataSetPieChart.push(data.Active);\n        }\n        return dataSetPieChart;\n    }\n\n    return (\n        <div>\n            <Doughnut\n                data={{\n                    labels: ['Recovered', 'Deaths', 'Confirmed', 'Active'],\n                    datasets: [\n                        {\n                            label: 'Dataset1',\n                            data: getPieChartData(vietNamToday),\n                            backgroundColor: [\n                                'rgb(142, 195, 195)',\n                                'rgb(255,69,0)',\n                                'rgb(39,70,135)',\n                                'rgb(255,215,0)'\n                            ],\n                            borderWidth: 2,\n                            maxBarThickness: 30,\n                        },\n                    ],\n                }}\n                height={400}\n                width={400}\n                margin={20}\n                options={{\n                    maintainAspectRatio: false,\n                    plugins: {\n                        \n                        legend: {\n                            display: true,\n                            labels: {\n                                font: {\n                                    size: 18\n                                }\n                            }\n                        }\n                    },\n                }}\n            />\n        </div>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}